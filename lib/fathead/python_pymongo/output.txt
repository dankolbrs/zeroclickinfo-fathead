bson BSON	A										<section class="prog_container"><pre><code>\nclass bson.BSON</pre></code><p>\ndecode(<em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)<p>Decode this BSON data.</p>\n<p>By default, returns a BSON document represented as a Python\ndict. To use a different MutableMapping class,\nconfigure a CodecOptions:</p>\n<pre>&gt;&gt;&gt; import collections  # From Python standard library.\n&gt;&gt;&gt; import bson\n&gt;&gt;&gt; from bson.codec_options import CodecOptions\n&gt;&gt;&gt; data = bson.BSON.encode({'a': 1})\n&gt;&gt;&gt; decoded_doc = bson.BSON.decode(data)\n&lt;type 'dict'&gt;\n&gt;&gt;&gt; options = CodecOptions(document_class=collections.OrderedDict)\n&gt;&gt;&gt; decoded_doc = bson.BSON.decode(data, codec_options=options)\n&gt;&gt;&gt; type(decoded_doc)\n&lt;class 'collections.OrderedDict'&gt;\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>codec_options (optional): An instance of\nCodecOptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Removed compile_re option: PyMongo now always represents BSON\nregular expressions as Regex objects. Use\ntry_compile() to attempt to convert from a\nBSON regular expression to a Python regular expression object.</p>\n<p>Replaced as_class, tz_aware, and uuid_subtype options with\ncodec_options.</p>\n\n\n<p>Changed in version 2.7: Added compile_re option. If set to False, PyMongo represented BSON\nregular expressions as Regex objects instead of\nattempting to compile BSON regular expressions as Python native\nregular expressions, thus preventing errors for some incompatible\npatterns, see PYTHON-500.</p>\n\n\nclassmethod encode(<em>document</em>, <em>check_keys=False</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)<p>Encode a document to a new BSON instance.</p>\n<p>A document can be any mapping type (like dict).</p>\n<p>Raises TypeError if document is not a mapping type,\nor contains keys that are not instances of\nbasestring (str in python 3). Raises\nInvalidDocument if document cannot be\nconverted to BSON.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>document: mapping type representing a document</li>\n<li>check_keys (optional): check if keys start with ‘$’ or\ncontain ‘.’, raising InvalidDocument in\neither case</li>\n<li>codec_options (optional): An instance of\nCodecOptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Replaced uuid_subtype option with codec_options.</p>\n\n<p>BSON (Binary JSON) data.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.BSON
bson decode_all	A										<section class="prog_container"><pre><code>\nbson.decode_all(<em>data</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode BSON data to multiple documents.</p>\n<p><code>data</code> must be a string of concatenated, valid, BSON-encoded\ndocuments.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>data</code>: BSON data</li>\n<li><code>codec_options</code> (optional): An instance of\nCodecOptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Removed <code>compile_re</code> option: PyMongo now always represents BSON regular\nexpressions as Regex objects. Use\ntry_compile() to attempt to convert from a\nBSON regular expression to a Python regular expression object.</p>\n<p>Replaced <code>as_class</code>, <code>tz_aware</code>, and <code>uuid_subtype</code> options with\n<code>codec_options</code>.</p>\n\n\n<p>Changed in version 2.7: Added <code>compile_re</code> option. If set to False, PyMongo represented BSON\nregular expressions as Regex objects instead of\nattempting to compile BSON regular expressions as Python native\nregular expressions, thus preventing errors for some incompatible\npatterns, see PYTHON-500.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.decode_all
bson decode_file_iter	A										<section class="prog_container"><pre><code>\nbson.decode_file_iter(<em>file_obj</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode bson data from a file to multiple documents as a generator.</p>\n<p>Works similarly to the decode_all function, but reads from the file object\nin chunks and parses bson in chunks, yielding one document at a time.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>file_obj</code>: A file object containing BSON data.</li>\n<li><code>codec_options</code> (optional): An instance of\nCodecOptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Replaced <code>as_class</code>, <code>tz_aware</code>, and <code>uuid_subtype</code> options with\n<code>codec_options</code>.</p>\n\n\n<p>New in version 2.8.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.decode_file_iter
bson decode_iter	A										<section class="prog_container"><pre><code>\nbson.decode_iter(<em>data</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p><p>Decode BSON data to multiple documents as a generator.</p>\n<p>Works similarly to the decode_all function, but yields one document at a\ntime.</p>\n<p><code>data</code> must be a string of concatenated, valid, BSON-encoded\ndocuments.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>data</code>: BSON data</li>\n<li><code>codec_options</code> (optional): An instance of\nCodecOptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Replaced <code>as_class</code>, <code>tz_aware</code>, and <code>uuid_subtype</code> options with\n<code>codec_options</code>.</p>\n\n\n<p>New in version 2.8.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.decode_iter
bson gen_list_name	A										<section class="prog_container"><pre><code>\nbson.gen_list_name()</pre></code><p><p>Generate “keys” for encoded lists in the sequence\nb”0”, b”1”, b”2”, ...</p>\n<p>The first 1000 keys are returned from a pre-built cache. All\nsubsequent keys are generated on the fly.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.gen_list_name
bson has_c	A										<section class="prog_container"><pre><code>\nbson.has_c()</pre></code><p><p>Is the C extension installed?</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.has_c
bson is_valid	A										<section class="prog_container"><pre><code>\nbson.is_valid(<em>bson</em>)</pre></code><p><p>Check that the given string represents valid BSON data.</p>\n<p>Raises TypeError if <code>bson</code> is not an instance of\nstr (bytes in python 3). Returns True\nif <code>bson</code> is valid BSON, False otherwise.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>bson</code>: the data to be validated</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/index.html#bson.is_valid
bson binary Binary	A										<section class="prog_container"><pre><code>\nclass bson.binary.Binary(<em>data</em>, <em>subtype=BINARY_SUBTYPE</em>)</pre></code><p>\nsubtype<p>Subtype of this binary data.</p>\n<p>Bases: str</p>\n<p>Representation of BSON binary data.</p>\n<p>This is necessary because we want to represent Python strings as\nthe BSON string type. We need to wrap binary data so we can tell\nthe difference between what should be considered binary data and\nwhat should be considered a string when we encode to BSON.</p>\n<p>Raises TypeError if <code>data</code> is not an instance of str\n(bytes in python 3) or <code>subtype</code> is not an instance of\nint. Raises ValueError if <code>subtype</code> is not in [0, 256).</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">In python 3 instances of Binary with subtype 0 will be decoded\ndirectly to bytes.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>data</code>: the binary data to represent</li>\n<li><code>subtype</code> (optional): the binary subtype\nto use</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.Binary
bson binary UUIDLegacy	A										<section class="prog_container"><pre><code>\nclass bson.binary.UUIDLegacy(<em>obj</em>)</pre></code><p>\nuuid<p>UUID instance wrapped by this UUIDLegacy instance.</p>\n<p>Bases: bson.binary.Binary</p>\n<p>UUID wrapper to support working with UUIDs stored as PYTHON_LEGACY.</p>\n<pre>&gt;&gt;&gt; import uuid\n&gt;&gt;&gt; from bson.binary import Binary, UUIDLegacy, STANDARD\n&gt;&gt;&gt; from bson.codec_options import CodecOptions\n&gt;&gt;&gt; my_uuid = uuid.uuid4()\n&gt;&gt;&gt; coll = db.get_collection('test',\n...                          CodecOptions(uuid_representation=STANDARD))\n&gt;&gt;&gt; coll.insert_one({'uuid': Binary(my_uuid.bytes, 3)}).inserted_id\nObjectId('...')\n&gt;&gt;&gt; coll.find({'uuid': my_uuid}).count()\n0\n&gt;&gt;&gt; coll.find({'uuid': UUIDLegacy(my_uuid)}).count()\n1\n&gt;&gt;&gt; coll.find({'uuid': UUIDLegacy(my_uuid)})[0]['uuid']\nUUID('...')\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Convert from subtype 3 to subtype 4\n&gt;&gt;&gt; doc = coll.find_one({'uuid': UUIDLegacy(my_uuid)})\n&gt;&gt;&gt; coll.replace_one({"_id": doc["_id"]}, doc).matched_count\n1\n&gt;&gt;&gt; coll.find({'uuid': UUIDLegacy(my_uuid)}).count()\n0\n&gt;&gt;&gt; coll.find({'uuid': {'$in': [UUIDLegacy(my_uuid), my_uuid]}}).count()\n1\n&gt;&gt;&gt; coll.find_one({'uuid': my_uuid})['uuid']\nUUID('...')\n</pre>\n\n<p>Raises TypeError if <code>obj</code> is not an instance of UUID.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>obj</code>: An instance of UUID.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.UUIDLegacy
bson binary BINARY_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.BINARY_SUBTYPE = 0</pre></code><p><p>BSON binary subtype for binary data.</p>\n<p>This is the default subtype for binary data.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.BINARY_SUBTYPE
bson binary FUNCTION_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.FUNCTION_SUBTYPE = 1</pre></code><p><p>BSON binary subtype for functions.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.FUNCTION_SUBTYPE
bson binary OLD_BINARY_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.OLD_BINARY_SUBTYPE = 2</pre></code><p><p>Old BSON binary subtype for binary data.</p>\n<p>This is the old default subtype, the current\ndefault is BINARY_SUBTYPE.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.OLD_BINARY_SUBTYPE
bson binary OLD_UUID_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.OLD_UUID_SUBTYPE = 3</pre></code><p><p>Old BSON binary subtype for a UUID.</p>\n<p>uuid.UUID instances will automatically be encoded\nby bson using this subtype.</p>\n\n<p>New in version 2.1.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.OLD_UUID_SUBTYPE
bson binary UUID_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.UUID_SUBTYPE = 4</pre></code><p><p>BSON binary subtype for a UUID.</p>\n<p>This is the new BSON binary subtype for UUIDs. The\ncurrent default is OLD_UUID_SUBTYPE but will\nchange to this in a future release.</p>\n\n<p>Changed in version 2.1: Changed to subtype 4.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.UUID_SUBTYPE
bson binary STANDARD	A										<section class="prog_container"><pre><code>\nbson.binary.STANDARD = 4</pre></code><p><p>The standard UUID representation.</p>\n<p>uuid.UUID instances will automatically be encoded to\nand decoded from BSON binary, using RFC-4122 byte order with\nbinary subtype UUID_SUBTYPE.</p>\n\n<p>New in version 3.0.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.STANDARD
bson binary PYTHON_LEGACY	A										<section class="prog_container"><pre><code>\nbson.binary.PYTHON_LEGACY = 3</pre></code><p><p>The Python legacy UUID representation.</p>\n<p>uuid.UUID instances will automatically be encoded to\nand decoded from BSON binary, using RFC-4122 byte order with\nbinary subtype OLD_UUID_SUBTYPE.</p>\n\n<p>New in version 3.0.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.PYTHON_LEGACY
bson binary JAVA_LEGACY	A										<section class="prog_container"><pre><code>\nbson.binary.JAVA_LEGACY = 5</pre></code><p><p>The Java legacy UUID representation.</p>\n<p>uuid.UUID instances will automatically be encoded to\nand decoded from BSON binary, using the Java driver’s legacy\nbyte order with binary subtype OLD_UUID_SUBTYPE.</p>\n\n<p>New in version 2.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.JAVA_LEGACY
bson binary CSHARP_LEGACY	A										<section class="prog_container"><pre><code>\nbson.binary.CSHARP_LEGACY = 6</pre></code><p><p>The C#/.net legacy UUID representation.</p>\n<p>uuid.UUID instances will automatically be encoded to\nand decoded from BSON binary, using the C# driver’s legacy\nbyte order and binary subtype OLD_UUID_SUBTYPE.</p>\n\n<p>New in version 2.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.CSHARP_LEGACY
bson binary MD5_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.MD5_SUBTYPE = 5</pre></code><p><p>BSON binary subtype for an MD5 hash.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.MD5_SUBTYPE
bson binary USER_DEFINED_SUBTYPE	A										<section class="prog_container"><pre><code>\nbson.binary.USER_DEFINED_SUBTYPE = 128</pre></code><p><p>BSON binary subtype for any user defined structure.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/binary.html#bson.binary.USER_DEFINED_SUBTYPE
bson code Code	A										<section class="prog_container"><pre><code>\nclass bson.code.Code(<em>code</em>, <em>scope=None</em>, <em>**kwargs</em>)</pre></code><p>\nscope<p>Scope dictionary for this instance or None.</p>\n<p>Bases: str</p>\n<p>BSON’s JavaScript code type.</p>\n<p>Raises TypeError if <code>code</code> is not an instance of\nbasestring (str in python 3) or <code>scope</code>\nis not None or an instance of dict.</p>\n<p>Scope variables can be set by passing a dictionary as the <code>scope</code>\nargument or by using keyword arguments. If a variable is set as a\nkeyword argument it will override any setting for that variable in\nthe <code>scope</code> dictionary.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>code</code>: A string containing JavaScript code to be evaluated or another\ninstance of Code. In the latter case, the scope of <code>code</code> becomes this\nCode’s scope.</li>\n<li><code>scope</code> (optional): dictionary representing the scope in which\n<code>code</code> should be evaluated - a mapping from identifiers (as\nstrings) to values. Defaults to None. This is applied after any\nscope associated with a given <code>code</code> above.</li>\n<li><code>**kwargs</code> (optional): scope variables can also be passed as\nkeyword arguments. These are applied after <code>scope</code> and <code>code</code>.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: The default value for scope is None instead of {}.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/code.html#bson.code.Code
bson codec_options CodecOptions	A										<section class="prog_container"><pre><code>\nclass bson.codec_options.CodecOptions</pre></code><p><p>Encapsulates BSON options used in CRUD operations.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>document_class</code>: BSON documents returned in queries will be decoded\nto an instance of this class. Must be a subclass of\nMutableMapping. Defaults to dict.</li>\n<li><code>tz_aware</code>: If True, BSON datetimes will be decoded to timezone\naware instances of datetime. Otherwise they will be\nnaive. Defaults to False.</li>\n<li><code>uuid_representation</code>: The BSON representation to use when encoding\nand decoding instances of UUID. Defaults to\nPYTHON_LEGACY.</li>\n<li><code>unicode_decode_error_handler</code>: The error handler to use when decoding\nan invalid BSON string. Valid options include ‘strict’, ‘replace’, and\n‘ignore’. Defaults to ‘strict’.</li>\n<li><code>tzinfo</code>: A tzinfo subclass that specifies the\ntimezone to/from which datetime objects should be\nencoded/decoded.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Care must be taken when changing\n<code>unicode_decode_error_handler</code> from its default value (‘strict’).\nThe ‘replace’ and ‘ignore’ modes should not be used when documents\nretrieved from the server will be modified in the client application\nand stored back to the server.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/codec_options.html#bson.codec_options.CodecOptions
bson dbref DBRef	A										<section class="prog_container"><pre><code>\nclass bson.dbref.DBRef(<em>collection</em>, <em>id</em>, <em>database=None</em>, <em>_extra={}</em>, <em>**kwargs</em>)</pre></code><p>\nas_doc()<p>Get the SON document representation of this DBRef.</p>\n<p>Generally not needed by application developers</p>\n\ncollection<p>Get the name of this DBRef’s collection as unicode.</p>\n\ndatabase<p>Get the name of this DBRef’s database.</p>\n<p>Returns None if this DBRef doesn’t specify a database.</p>\n\nid<p>Get this DBRef’s _id.</p>\n<p>Initialize a new DBRef.</p>\n<p>Raises TypeError if <code>collection</code> or <code>database</code> is not\nan instance of basestring (str in python 3).\n<code>database</code> is optional and allows references to documents to work\nacross databases. Any additional keyword arguments will create\nadditional fields in the resultant embedded document.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>collection</code>: name of the collection the document is stored in</li>\n<li><code>id</code>: the value of the document’s "_id" field</li>\n<li><code>database</code> (optional): name of the database to reference</li>\n<li><code>**kwargs</code> (optional): additional keyword arguments will\ncreate additional, custom fields</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>dbrefs</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/dbref.html#bson.dbref.DBRef
bson decimal128 Decimal128	A										<section class="prog_container"><pre><code>\nclass bson.decimal128.Decimal128(<em>value</em>)</pre></code><p>\nto_decimal()<p>Returns an instance of decimal.Decimal for this\nDecimal128.</p>\n\nclassmethod from_bid(<em>value</em>)<p>Create an instance of Decimal128 from Binary Integer\nDecimal string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>value: 16 byte string (128-bit IEEE 754-2008 decimal floating\npoint in Binary Integer Decimal (BID) format).</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nbid<p>The Binary Integer Decimal (BID) encoding of this instance.</p>\n<p>BSON Decimal128 type:</p>\n<pre>&gt;&gt;&gt; Decimal128(Decimal("0.0005"))\nDecimal128('0.0005')\n&gt;&gt;&gt; Decimal128("0.0005")\nDecimal128('0.0005')\n&gt;&gt;&gt; Decimal128((3474527112516337664, 5))\nDecimal128('0.0005')\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>value</code>: An instance of decimal.Decimal, string, or tuple of\n(high bits, low bits) from Binary Integer Decimal (BID) format.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p>Decimal128 uses an instance of decimal.Context\nconfigured for IEEE-754 Decimal128 when validating parameters.\nSignals like decimal.InvalidOperation, decimal.Inexact,\nand decimal.Overflow are trapped and raised as exceptions:</p>\n<pre>&gt;&gt;&gt; Decimal128(".13.1")\nTraceback (most recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n  ...\ndecimal.InvalidOperation: [&lt;class 'decimal.ConversionSyntax'&gt;]\n&gt;&gt;&gt;\n&gt;&gt;&gt; Decimal128("1E-6177")\nTraceback (most recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n  ...\ndecimal.Inexact: [&lt;class 'decimal.Inexact'&gt;]\n&gt;&gt;&gt;\n&gt;&gt;&gt; Decimal128("1E6145")\nTraceback (most recent call last):\n  File "&lt;stdin&gt;", line 1, in &lt;module&gt;\n  ...\ndecimal.Overflow: [&lt;class 'decimal.Overflow'&gt;, &lt;class 'decimal.Rounded'&gt;]\n</pre>\n\n<p>To ensure the result of a calculation can always be stored as BSON\nDecimal128 use the context returned by\ncreate_decimal128_context():</p>\n<pre>&gt;&gt;&gt; import decimal\n&gt;&gt;&gt; decimal128_ctx = create_decimal128_context()\n&gt;&gt;&gt; with decimal.localcontext(decimal128_ctx) as ctx:\n...     Decimal128(ctx.create_decimal(".13.3"))\n...\nDecimal128('NaN')\n&gt;&gt;&gt;\n&gt;&gt;&gt; with decimal.localcontext(decimal128_ctx) as ctx:\n...     Decimal128(ctx.create_decimal("1E-6177"))\n...\nDecimal128('0E-6176')\n&gt;&gt;&gt;\n&gt;&gt;&gt; with decimal.localcontext(DECIMAL128_CTX) as ctx:\n...     Decimal128(ctx.create_decimal("1E6145"))\n...\nDecimal128('Infinity')\n</pre>\n\n<p>To match the behavior of MongoDB’s Decimal128 implementation\nstr(Decimal(value)) may not match str(Decimal128(value)) for NaN values:</p>\n<pre>&gt;&gt;&gt; Decimal128(Decimal('NaN'))\nDecimal128('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('-NaN'))\nDecimal128('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('sNaN'))\nDecimal128('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('-sNaN'))\nDecimal128('NaN')\n</pre>\n\n<p>However, to_decimal() will return the exact value:</p>\n<pre>&gt;&gt;&gt; Decimal128(Decimal('NaN')).to_decimal()\nDecimal('NaN')\n&gt;&gt;&gt; Decimal128(Decimal('-NaN')).to_decimal()\nDecimal('-NaN')\n&gt;&gt;&gt; Decimal128(Decimal('sNaN')).to_decimal()\nDecimal('sNaN')\n&gt;&gt;&gt; Decimal128(Decimal('-sNaN')).to_decimal()\nDecimal('-sNaN')\n</pre>\n\n<p>Two instances of Decimal128 compare equal if their Binary\nInteger Decimal encodings are equal:</p>\n<pre>&gt;&gt;&gt; Decimal128('NaN') == Decimal128('NaN')\nTrue\n&gt;&gt;&gt; Decimal128('NaN').bid == Decimal128('NaN').bid\nTrue\n</pre>\n\n<p>This differs from decimal.Decimal comparisons for NaN:</p>\n<pre>&gt;&gt;&gt; Decimal('NaN') == Decimal('NaN')\nFalse\n</pre>\n\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.Decimal128
bson decimal128 create_decimal128_context	A										<section class="prog_container"><pre><code>\nbson.decimal128.create_decimal128_context()</pre></code><p><p>Returns an instance of decimal.Context appropriate\nfor working with IEEE-754 128-bit decimal floating point values.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/decimal128.html#bson.decimal128.create_decimal128_context
bson errors BSONError	A										<section class="prog_container"><pre><code>\nexception bson.errors.BSONError</pre></code><p><p>Base class for all BSON exceptions.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.BSONError
bson errors InvalidBSON	A										<section class="prog_container"><pre><code>\nexception bson.errors.InvalidBSON</pre></code><p><p>Raised when trying to create a BSON object from invalid data.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidBSON
bson errors InvalidDocument	A										<section class="prog_container"><pre><code>\nexception bson.errors.InvalidDocument</pre></code><p><p>Raised when trying to create a BSON object from an invalid document.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidDocument
bson errors InvalidId	A										<section class="prog_container"><pre><code>\nexception bson.errors.InvalidId</pre></code><p><p>Raised when trying to create an ObjectId from invalid data.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidId
bson errors InvalidStringData	A										<section class="prog_container"><pre><code>\nexception bson.errors.InvalidStringData</pre></code><p><p>Raised when trying to encode a string containing non-UTF8 data.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/errors.html#bson.errors.InvalidStringData
bson int64 Int64	A										<section class="prog_container"><pre><code>\nclass bson.int64.Int64</pre></code><p><p>Representation of the BSON int64 type.</p>\n<p>This is necessary because every integral number is an int in\nPython 3. Small integral numbers are encoded to BSON int32 by default,\nbut Int64 numbers will always be encoded to BSON int64.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>value</code>: the numeric value to represent</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/int64.html#bson.int64.Int64
bson json_util DatetimeRepresentation	A										<section class="prog_container"><pre><code>\nclass bson.json_util.DatetimeRepresentation</pre></code><p>\nLEGACY = 0<p>Legacy MongoDB Extended JSON datetime representation.</p>\n<p>datetime.datetime instances will be encoded to JSON in the\nformat {“$date”: &lt;dateAsMilliseconds&gt;}, where dateAsMilliseconds is\na 64-bit signed integer giving the number of milliseconds since the Unix\nepoch UTC. This was the default encoding before PyMongo version 3.4.</p>\n\n<p>New in version 3.4.</p>\n\n\nNUMBERLONG = 1<p>NumberLong datetime representation.</p>\n<p>datetime.datetime instances will be encoded to JSON in the\nformat {“$date”: {“$numberLong”: “&lt;dateAsMilliseconds&gt;”}},\nwhere dateAsMilliseconds is the string representation of a 64-bit signed\ninteger giving the number of milliseconds since the Unix epoch UTC.</p>\n\n<p>New in version 3.4.</p>\n\n\nISO8601 = 2<p>ISO-8601 datetime representation.</p>\n<p>datetime.datetime instances greater than or equal to the Unix\nepoch UTC will be encoded to JSON in the format {“$date”: “&lt;ISO-8601&gt;”}.\ndatetime.datetime instances before the Unix epoch UTC will be\nencoded as if the datetime representation is\nNUMBERLONG.</p>\n\n<p>New in version 3.4.</p>\n\n\n\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DatetimeRepresentation
bson json_util JSONOptions	A										<section class="prog_container"><pre><code>\nclass bson.json_util.JSONOptions</pre></code><p><p>Encapsulates JSON options for dumps() and loads().</p>\n<p>Raises ConfigurationError on Python 2.6 if\nsimplejson is not installed\nand document_class is not the default (dict).</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>strict_number_long</code>: If True, Int64 objects\nare encoded to MongoDB Extended JSON’s <em>Strict mode</em> type\n<code>NumberLong</code>, ie '{"$numberLong": "&lt;number&gt;" }'. Otherwise they\nwill be encoded as an <code>int</code>. Defaults to False.</li>\n<li><code>datetime_representation</code>: The representation to use when encoding\ninstances of datetime.datetime. Defaults to\nLEGACY.</li>\n<li><code>strict_uuid</code>: If True, uuid.UUID object are encoded to\nMongoDB Extended JSON’s <em>Strict mode</em> type <code>Binary</code>. Otherwise it\nwill be encoded as '{"$uuid": "&lt;hex&gt;" }'. Defaults to False.</li>\n<li><code>document_class</code>: BSON documents returned by loads() will be\ndecoded to an instance of this class. Must be a subclass of\ncollections.MutableMapping. Defaults to dict.</li>\n<li><code>uuid_representation</code>: The BSON representation to use when encoding\nand decoding instances of uuid.UUID. Defaults to\nPYTHON_LEGACY.</li>\n<li><code>tz_aware</code>: If True, MongoDB Extended JSON’s <em>Strict mode</em> type\n<code>Date</code> will be decoded to timezone aware instances of\ndatetime.datetime. Otherwise they will be naive. Defaults\nto True.</li>\n<li><code>tzinfo</code>: A datetime.tzinfo subclass that specifies the\ntimezone from which datetime objects should be\ndecoded. Defaults to utc.</li>\n<li><code>args</code>: arguments to CodecOptions</li>\n<li><code>kwargs</code>: arguments to CodecOptions</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="last">The documentation for MongoDB Extended JSON.</p>\n\n\n<p>New in version 3.4.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.JSONOptions
bson json_util dumps	A										<section class="prog_container"><pre><code>\nbson.json_util.dumps(<em>obj</em>, <em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Helper function that wraps json.dumps().</p>\n<p>Recursive function that handles all BSON types including\nBinary and Code.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>json_options</code>: A JSONOptions instance used to modify the\nencoding of MongoDB Extended JSON types. Defaults to\nDEFAULT_JSON_OPTIONS.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Accepts optional parameter <code>json_options</code>. See JSONOptions.</p>\n\n\n<p>Changed in version 2.7: Preserves order when rendering SON, Timestamp, Code, Binary, and DBRef\ninstances.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.dumps
bson json_util loads	A										<section class="prog_container"><pre><code>\nbson.json_util.loads(<em>s</em>, <em>*args</em>, <em>**kwargs</em>)</pre></code><p><p>Helper function that wraps json.loads().</p>\n<p>Automatically passes the object_hook for BSON type conversion.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>json_options</code>: A JSONOptions instance used to modify the\ndecoding of MongoDB Extended JSON types. Defaults to\nDEFAULT_JSON_OPTIONS.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Accepts optional parameter <code>json_options</code>. See JSONOptions.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.loads
bson json_util object_pairs_hook	A										<section class="prog_container"><pre><code>\nbson.json_util.object_pairs_hook(<em>pairs</em>, <em>json_options=JSONOptions(strict_number_long=False</em>, <em>datetime_representation=0</em>, <em>strict_uuid=False</em>, <em>document_class=dict</em>, <em>tz_aware=True</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em>)</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.object_pairs_hook
bson json_util object_hook	A										<section class="prog_container"><pre><code>\nbson.json_util.object_hook(<em>dct</em>, <em>json_options=JSONOptions(strict_number_long=False</em>, <em>datetime_representation=0</em>, <em>strict_uuid=False</em>, <em>document_class=dict</em>, <em>tz_aware=True</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em>)</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.object_hook
bson json_util default	A										<section class="prog_container"><pre><code>\nbson.json_util.default(<em>obj</em>, <em>json_options=JSONOptions(strict_number_long=False</em>, <em>datetime_representation=0</em>, <em>strict_uuid=False</em>, <em>document_class=dict</em>, <em>tz_aware=True</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</em>)</pre></code><p></p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.default
bson json_util DEFAULT_JSON_OPTIONS	A										<section class="prog_container"><pre><code>\nbson.json_util.DEFAULT_JSON_OPTIONS = JSONOptions(strict_number_long=False, datetime_representation=0, strict_uuid=False, document_class=dict, tz_aware=True, uuid_representation=PYTHON_LEGACY, unicode_decode_error_handler='strict', tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</pre></code><p><p>The default JSONOptions for JSON encoding/decoding.</p>\n\n<p>New in version 3.4.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.DEFAULT_JSON_OPTIONS
bson json_util STRICT_JSON_OPTIONS	A										<section class="prog_container"><pre><code>\nbson.json_util.STRICT_JSON_OPTIONS = JSONOptions(strict_number_long=True, datetime_representation=2, strict_uuid=True, document_class=dict, tz_aware=True, uuid_representation=PYTHON_LEGACY, unicode_decode_error_handler='strict', tzinfo=&lt;bson.tz_util.FixedOffset object at 0x7feb78b44e50&gt;)</pre></code><p><p>JSONOptions for MongoDB Extended JSON’s <em>Strict mode</em> encoding.</p>\n\n<p>New in version 3.4.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/json_util.html#bson.json_util.STRICT_JSON_OPTIONS
bson max_key MaxKey	A										<section class="prog_container"><pre><code>\nclass bson.max_key.MaxKey</pre></code><p><p>MongoDB internal MaxKey type.</p>\n\n<p>Changed in version 2.7: MaxKey now implements comparison operators.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/max_key.html#bson.max_key.MaxKey
bson min_key MinKey	A										<section class="prog_container"><pre><code>\nclass bson.min_key.MinKey</pre></code><p><p>MongoDB internal MinKey type.</p>\n\n<p>Changed in version 2.7: MinKey now implements comparison operators.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/min_key.html#bson.min_key.MinKey
bson objectid ObjectId	A										<section class="prog_container"><pre><code>\nclass bson.objectid.ObjectId(<em>oid=None</em>)</pre></code><p>\nclassmethod from_datetime(<em>generation_time</em>)<p>Create a dummy ObjectId instance with a specific generation time.</p>\n<p>This method is useful for doing range queries on a field\ncontaining ObjectId instances.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">It is not safe to insert a document containing an ObjectId\ngenerated using this method. This method deliberately\neliminates the uniqueness guarantee that ObjectIds\ngenerally provide. ObjectIds generated with this method\nshould be used exclusively in queries.</p>\n\n<p>generation_time will be converted to UTC. Naive datetime\ninstances will be treated as though they already contain UTC.</p>\n<p>An example using this helper to get documents where "_id"\nwas generated before January 1, 2010 would be:</p>\n<pre>&gt;&gt;&gt; gen_time = datetime.datetime(2010, 1, 1)\n&gt;&gt;&gt; dummy_id = ObjectId.from_datetime(gen_time)\n&gt;&gt;&gt; result = collection.find({"_id": {"$lt": dummy_id}})\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>generation_time: datetime to be used\nas the generation time for the resulting ObjectId.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nclassmethod is_valid(<em>oid</em>)<p>Checks if a oid string is valid or not.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>oid: the object id to validate</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 2.3.</p>\n\n\nbinary<p>12-byte binary representation of this ObjectId.</p>\n\ngeneration_time<p>A datetime.datetime instance representing the time of\ngeneration for this ObjectId.</p>\n<p>The datetime.datetime is timezone aware, and\nrepresents the generation time in UTC. It is precise to the\nsecond.</p>\n\nstr(o)<p>Get a hex encoded version of ObjectId o.</p>\n<p>The following property always holds:</p>\n<pre>&gt;&gt;&gt; o = ObjectId()\n&gt;&gt;&gt; o == ObjectId(str(o))\nTrue\n</pre>\n\n<p>This representation is useful for urls or other places where\no.binary is inappropriate.</p>\n<p>Initialize a new ObjectId.</p>\n<p>An ObjectId is a 12-byte unique identifier consisting of:</p>\n\n<ul>\n<li>a 4-byte value representing the seconds since the Unix epoch,</li>\n<li>a 3-byte machine identifier,</li>\n<li>a 2-byte process id, and</li>\n<li>a 3-byte counter, starting with a random value.</li>\n</ul>\n\n<p>By default, ObjectId() creates a new unique identifier. The\noptional parameter <code>oid</code> can be an ObjectId, or any 12\nbytes or, in Python 2, any 12-character str.</p>\n<p>For example, the 12 bytes b’foo-bar-quux’ do not follow the ObjectId\nspecification but they are acceptable input:</p>\n<pre>&gt;&gt;&gt; ObjectId(b'foo-bar-quux')\nObjectId('666f6f2d6261722d71757578')\n</pre>\n\n<p><code>oid</code> can also be a unicode or str of 24 hex digits:</p>\n<pre>&gt;&gt;&gt; ObjectId('0123456789ab0123456789ab')\nObjectId('0123456789ab0123456789ab')\n&gt;&gt;&gt;\n&gt;&gt;&gt; # A u-prefixed unicode literal:\n&gt;&gt;&gt; ObjectId(u'0123456789ab0123456789ab')\nObjectId('0123456789ab0123456789ab')\n</pre>\n\n<p>Raises InvalidId if <code>oid</code> is not 12 bytes nor\n24 hex digits, or TypeError if <code>oid</code> is not an accepted type.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>oid</code> (optional): a valid ObjectId.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>objectids</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/bson/objectid.html#bson.objectid.ObjectId
bson raw_bson RawBSONDocument	A										<section class="prog_container"><pre><code>\nclass bson.raw_bson.RawBSONDocument(<em>bson_bytes</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>)</pre></code><p>\nitems()<p>Lazily decode and iterate elements in this document.</p>\n\nraw<p>The raw BSON bytes composing this document.</p>\n<p>Create a new RawBSONDocument.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>bson_bytes</code>: the BSON bytes that compose this document</li>\n<li><code>codec_options</code> (optional): An instance of\nCodecOptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/raw_bson.html#bson.raw_bson.RawBSONDocument
bson regex Regex	A										<section class="prog_container"><pre><code>\nclass bson.regex.Regex(<em>pattern</em>, <em>flags=0</em>)</pre></code><p>\ntry_compile()<p>Compile this Regex as a Python regular expression.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Python regular expressions use a different syntax and different\nset of flags than MongoDB, which uses PCRE. A regular\nexpression retrieved from the server may not compile in\nPython, or may match a different set of strings in Python than\nwhen used in a MongoDB query. try_compile() may raise\nre.error.</p>\n\n\nclassmethod from_native(<em>regex</em>)<p>Convert a Python regular expression into a Regex instance.</p>\n<p>Note that in Python 3, a regular expression compiled from a\nstr has the re.UNICODE flag set. If it is undesirable\nto store this flag in a BSON regular expression, unset it first:</p>\n<pre>&gt;&gt;&gt; pattern = re.compile('.*')\n&gt;&gt;&gt; regex = Regex.from_native(pattern)\n&gt;&gt;&gt; regex.flags ^= re.UNICODE\n&gt;&gt;&gt; db.collection.insert({'pattern': regex})\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>regex: A regular expression object from re.compile().</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Python regular expressions use a different syntax and different\nset of flags than MongoDB, which uses PCRE. A regular\nexpression retrieved from the server may not compile in\nPython, or may match a different set of strings in Python than\nwhen used in a MongoDB query.</p>\n\n<p>BSON regular expression data.</p>\n<p>This class is useful to store and retrieve regular expressions that are\nincompatible with Python’s regular expression dialect.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>pattern</code>: string</li>\n<li><code>flags</code>: (optional) an integer bitmask, or a string of flag\ncharacters like “im” for IGNORECASE and MULTILINE</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/regex.html#bson.regex.Regex
bson son SON	A										<section class="prog_container"><pre><code>\nclass bson.son.SON(<em>data=None</em>, <em>**kwargs</em>)</pre></code><p>\nto_dict()<p>Convert a SON document to a normal Python dictionary instance.</p>\n<p>This is trickier than just <em>dict(...)</em> because it needs to be\nrecursive.</p>\n<p>SON data.</p>\n<p>A subclass of dict that maintains ordering of keys and provides a\nfew extra niceties for dealing with SON. SON objects can be\nconverted to and from BSON.</p>\n<p>The mapping from Python types to BSON types is as follows:</p>\n<table>\n<colgroup>\n<col></col>\n<col></col>\n<col></col>\n</colgroup>\n<thead valign="bottom">\n<tr><th>Python Type</th>\n<th>BSON Type</th>\n<th>Supported Direction</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr><td>None</td>\n<td>null</td>\n<td>both</td>\n</tr>\n<tr><td>bool</td>\n<td>boolean</td>\n<td>both</td>\n</tr>\n<tr><td>int [1]</td>\n<td>int32 / int64</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr><td>long</td>\n<td>int64</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr><td><code>bson.int64.Int64</code></td>\n<td>int64</td>\n<td>both</td>\n</tr>\n<tr><td>float</td>\n<td>number (real)</td>\n<td>both</td>\n</tr>\n<tr><td>string</td>\n<td>string</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr><td>unicode</td>\n<td>string</td>\n<td>both</td>\n</tr>\n<tr><td>list</td>\n<td>array</td>\n<td>both</td>\n</tr>\n<tr><td>dict / <code>SON</code></td>\n<td>object</td>\n<td>both</td>\n</tr>\n<tr><td>datetime.datetime [2] [3]</td>\n<td>date</td>\n<td>both</td>\n</tr>\n<tr><td><code>bson.regex.Regex</code></td>\n<td>regex</td>\n<td>both</td>\n</tr>\n<tr><td>compiled re [4]</td>\n<td>regex</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr><td><code>bson.binary.Binary</code></td>\n<td>binary</td>\n<td>both</td>\n</tr>\n<tr><td><code>bson.objectid.ObjectId</code></td>\n<td>oid</td>\n<td>both</td>\n</tr>\n<tr><td><code>bson.dbref.DBRef</code></td>\n<td>dbref</td>\n<td>both</td>\n</tr>\n<tr><td>None</td>\n<td>undefined</td>\n<td>bson -&gt; py</td>\n</tr>\n<tr><td>unicode</td>\n<td>code</td>\n<td>bson -&gt; py</td>\n</tr>\n<tr><td><code>bson.code.Code</code></td>\n<td>code</td>\n<td>py -&gt; bson</td>\n</tr>\n<tr><td>unicode</td>\n<td>symbol</td>\n<td>bson -&gt; py</td>\n</tr>\n<tr><td>bytes (Python 3) [5]</td>\n<td>binary</td>\n<td>both</td>\n</tr>\n</tbody>\n</table>\n<p>Note that to save binary data it must be wrapped as an instance of\n<code>bson.binary.Binary</code>. Otherwise it will be saved as a BSON string\nand retrieved as unicode.</p>\n<table>\n<colgroup><col></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td>[1]</td><td>A Python int will be saved as a BSON int32 or BSON int64 depending\non its size. A BSON int32 will always decode to a Python int. A BSON\nint64 will always decode to a Int64.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td>[2]</td><td>datetime.datetime instances will be rounded to the nearest\nmillisecond when saved</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td>[3]</td><td>all datetime.datetime instances are treated as <em>naive</em>. clients\nshould always use UTC.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td>[4]</td><td>Regex instances and regular expression\nobjects from re.compile() are both saved as BSON regular expressions.\nBSON regular expressions are decoded as Regex\ninstances.</td></tr>\n</tbody>\n</table>\n<table>\n<colgroup><col></col><col></col></colgroup>\n<tbody valign="top">\n<tr><td>[5]</td><td>The bytes type from Python 3.x is encoded as BSON binary with\nsubtype 0. In Python 3.x it will be decoded back to bytes. In Python 2.x\nit will be decoded to an instance of Binary with\nsubtype 0.</td></tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/son.html#bson.son.SON
bson timestamp Timestamp	A										<section class="prog_container"><pre><code>\nclass bson.timestamp.Timestamp(<em>time</em>, <em>inc</em>)</pre></code><p>\nas_datetime()<p>Return a datetime instance corresponding\nto the time portion of this Timestamp.</p>\n<p>The returned datetime’s timezone is UTC.</p>\n\ninc<p>Get the inc portion of this Timestamp.</p>\n\ntime<p>Get the time portion of this Timestamp.</p>\n<p>Create a new Timestamp.</p>\n<p>This class is only for use with the MongoDB opLog. If you need\nto store a regular timestamp, please use a\ndatetime.</p>\n<p>Raises TypeError if <code>time</code> is not an instance of\n:class: <code>int</code> or datetime, or <code>inc</code> is not\nan instance of int. Raises ValueError if\n<code>time</code> or <code>inc</code> is not in [0, 2**32).</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>time</code>: time in seconds since epoch UTC, or a naive UTC\ndatetime, or an aware\ndatetime</li>\n<li><code>inc</code>: the incrementing counter</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/bson/timestamp.html#bson.timestamp.Timestamp
bson tz_util FixedOffset	A										<section class="prog_container"><pre><code>\nclass bson.tz_util.FixedOffset(<em>offset</em>, <em>name</em>)</pre></code><p><p>Fixed offset timezone, in minutes east from UTC.</p>\n<p>Implementation based from the Python standard library documentation.\nDefining __getinitargs__ enables pickling / copying.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/tz_util.html#bson.tz_util.FixedOffset
bson tz_util utc	A										<section class="prog_container"><pre><code>\nbson.tz_util.utc = &lt;bson.tz_util.FixedOffset object&gt;</pre></code><p><p>Fixed offset timezone representing UTC.</p>\n</p></section>	http://api.mongodb.com/python/current/api/bson/tz_util.html#bson.tz_util.utc
pymongo has_c	A										<section class="prog_container"><pre><code>\npymongo.has_c()</pre></code><p><p>Is the C extension installed?</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.has_c
pymongo version	A										<section class="prog_container"><pre><code>\npymongo.version = '3.4.0'</pre></code><p><p>Current version of PyMongo.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.version
pymongo MongoClient	A										<section class="prog_container"><pre><code>\npymongo.MongoClient</pre></code><p><p>Alias for pymongo.mongo_client.MongoClient.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MongoClient
pymongo MongoReplicaSetClient	A										<section class="prog_container"><pre><code>\npymongo.MongoReplicaSetClient</pre></code><p><p>Alias for pymongo.mongo_replica_set_client.MongoReplicaSetClient.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MongoReplicaSetClient
pymongo ReadPreference	A										<section class="prog_container"><pre><code>\npymongo.ReadPreference</pre></code><p><p>Alias for pymongo.read_preferences.ReadPreference.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.ReadPreference
pymongo MIN_SUPPORTED_WIRE_VERSION	A										<section class="prog_container"><pre><code>\npymongo.MIN_SUPPORTED_WIRE_VERSION</pre></code><p><p>The minimum wire protocol version PyMongo supports.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MIN_SUPPORTED_WIRE_VERSION
pymongo MAX_SUPPORTED_WIRE_VERSION	A										<section class="prog_container"><pre><code>\npymongo.MAX_SUPPORTED_WIRE_VERSION</pre></code><p><p>The maximum wire protocol version PyMongo supports.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/index.html#pymongo.MAX_SUPPORTED_WIRE_VERSION
pymongo database Database	A										<section class="prog_container"><pre><code>\nclass pymongo.database.Database(<em>client</em>, <em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)</pre></code><p>\nadd_son_manipulator(<em>manipulator</em>)<p>Add a new son manipulator to this database.</p>\n<p><strong>DEPRECATED</strong> - add_son_manipulator is deprecated.</p>\n\n<p>Changed in version 3.0: Deprecated add_son_manipulator.</p>\n\n\nadd_user(<em>name</em>, <em>password=None</em>, <em>read_only=None</em>, <em>**kwargs</em>)<p>Create user name with password password.</p>\n<p>Add a new user with permissions for this Database.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">Will change the password if user name already exists.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: the name of the user to create</li>\n<li>password (optional): the password of the user to create. Can not\nbe used with the userSource argument.</li>\n<li>read_only (optional): if True the user will be read only</li>\n<li>**kwargs (optional): optional fields for the user document\n(e.g. userSource, otherDBRoles, or roles). See\nhttp://docs.mongodb.org/manual/reference/privilege-documents\nfor more information.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The use of optional keyword arguments like userSource,\notherDBRoles, or roles requires MongoDB &gt;= 2.4.0</p>\n\n\n<p>Changed in version 2.5: Added kwargs support for optional fields introduced in MongoDB 2.4</p>\n\n\n<p>Changed in version 2.2: Added support for read only users</p>\n\n\nauthenticate(<em>name=None</em>, <em>password=None</em>, <em>source=None</em>, <em>mechanism='DEFAULT'</em>, <em>**kwargs</em>)<p>Authenticate to use this database.</p>\n<p>Authentication lasts for the life of the underlying client\ninstance, or until logout() is called.</p>\n<p>Raises TypeError if (required) name, (optional) password,\nor (optional) source is not an instance of basestring\n(str in python 3).</p>\n\n<p class="first admonition-title">Note</p>\n<ul>\n<li>This method authenticates the current connection, and\nwill also cause all new socket connections\nin the underlying client instance to be authenticated automatically.</li>\n<li>Authenticating more than once on the same database with different\ncredentials is not supported. You must call logout() before\nauthenticating with new credentials.</li>\n<li>When sharing a client instance between multiple threads, all\nthreads will share the authentication. If you need different\nauthentication profiles for different purposes you must use\ndistinct client instances.</li>\n</ul>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: the name of the user to authenticate. Optional when\nmechanism is MONGODB-X509 and the MongoDB server version is\n&gt;= 3.4.</li>\n<li>password (optional): the password of the user to authenticate.\nNot used with GSSAPI or MONGODB-X509 authentication.</li>\n<li>source (optional): the database to authenticate on. If not\nspecified the current database is used.</li>\n<li>mechanism (optional): See\nMECHANISMS for options.\nBy default, use SCRAM-SHA-1 with MongoDB 3.0 and later,\nMONGODB-CR (MongoDB Challenge Response protocol) for older servers.</li>\n<li>authMechanismProperties (optional): Used to specify\nauthentication mechanism specific options. To specify the service\nname for GSSAPI authentication pass\nauthMechanismProperties=’SERVICE_NAME:&lt;service name&gt;’</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 2.8: Use SCRAM-SHA-1 with MongoDB 3.0 and later.</p>\n\n\n<p>Changed in version 2.5: Added the source and mechanism parameters. authenticate()\nnow raises a subclass of PyMongoError if\nauthentication fails due to invalid credentials or configuration\nissues.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>authenticate</em></p>\n\n\ncollection_names(<em>include_system_collections=True</em>)<p>Get a list of all the collection names in this database.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>include_system_collections (optional): if False list\nwill not include system collections (e.g system.indexes)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ncommand(<em>command</em>, <em>value=1</em>, <em>check=True</em>, <em>allowable_errors=None</em>, <em>read_preference=Primary()</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>, <em>**kwargs</em>)<p>Issue a MongoDB command.</p>\n<p>Send command command to the database and return the\nresponse. If command is an instance of basestring\n(str in python 3) then the command {command: value}\nwill be sent. Otherwise, command must be an instance of\ndict and will be sent as is.</p>\n<p>Any additional keyword arguments will be added to the final\ncommand document before it is sent.</p>\n<p>For example, a command like {buildinfo: 1} can be sent\nusing:</p>\n<pre>&gt;&gt;&gt; db.command("buildinfo")\n</pre>\n\n<p>For a command where the value matters, like {collstats:\ncollection_name} we can do:</p>\n<pre>&gt;&gt;&gt; db.command("collstats", collection_name)\n</pre>\n\n<p>For commands that take additional arguments we can use\nkwargs. So {filemd5: object_id, root: file_root} becomes:</p>\n<pre>&gt;&gt;&gt; db.command("filemd5", object_id, root=file_root)\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><p class="first">command: document representing the command to be issued,\nor the name of the command (for simple commands only).</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">the order of keys in the command document is\nsignificant (the “verb” must come first), so commands\nwhich require multiple keys (e.g. findandmodify)\nshould use an instance of SON or\na string and kwargs instead of a Python dict.</p>\n\n</li>\n<li><p class="first">value (optional): value to use for the command verb when\ncommand is passed as a string</p>\n</li>\n<li><p class="first">check (optional): check the response for errors, raising\nOperationFailure if there are any</p>\n</li>\n<li><p class="first">allowable_errors: if check is True, error messages\nin this list will be ignored by error-checking</p>\n</li>\n<li><p class="first">read_preference: The read preference for this operation.\nSee read_preferences for options.</p>\n</li>\n<li><p class="first">codec_options: A CodecOptions\ninstance.</p>\n</li>\n<li><p class="first">**kwargs (optional): additional keyword arguments will\nbe added to the command document before it is sent</p>\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">command() does <strong>not</strong> obey read_preference\nor codec_options. You must use the read_preference and\ncodec_options parameters instead.</p>\n\n\n<p>Changed in version 3.0: Removed the as_class, fields, uuid_subtype, tag_sets,\nand secondary_acceptable_latency_ms option.\nRemoved compile_re option: PyMongo now always represents BSON\nregular expressions as Regex objects. Use\ntry_compile() to attempt to convert from a\nBSON regular expression to a Python regular expression object.\nAdded the codec_options parameter.</p>\n\n\n<p>Changed in version 2.7: Added compile_re option. If set to False, PyMongo represented BSON\nregular expressions as Regex objects instead of\nattempting to compile BSON regular expressions as Python native\nregular expressions, thus preventing errors for some incompatible\npatterns, see PYTHON-500.</p>\n\n\n<p>Changed in version 2.3: Added tag_sets and secondary_acceptable_latency_ms options.</p>\n\n\n<p>Changed in version 2.2: Added support for as_class - the class you want to use for\nthe resulting documents</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>commands</em></p>\n\n\ncreate_collection(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>, <em>**kwargs</em>)<p>Create a new Collection in this\ndatabase.</p>\n<p>Normally collection creation is automatic. This method should\nonly be used to specify options on\ncreation. CollectionInvalid will be\nraised if the collection already exists.</p>\n<p>Options should be passed as keyword arguments to this method. Supported\noptions vary with MongoDB release. Some examples include:</p>\n\n<ul>\n<li>“size”: desired initial size for the collection (in\nbytes). For capped collections this size is the max\nsize of the collection.</li>\n<li>“capped”: if True, this is a capped collection</li>\n<li>“max”: maximum number of objects if capped (optional)</li>\n</ul>\n\n<p>See the MongoDB documentation for a full list of supported options by\nserver version.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: the name of the collection to create</li>\n<li>codec_options (optional): An instance of\nCodecOptions. If None (the\ndefault) the codec_options of this Database is\nused.</li>\n<li>read_preference (optional): The read preference to use. If\nNone (the default) the read_preference of this\nDatabase is used.</li>\n<li>write_concern (optional): An instance of\nWriteConcern. If None (the\ndefault) the write_concern of this Database is\nused.</li>\n<li>read_concern (optional): An instance of\nReadConcern. If None (the\ndefault) the read_concern of this Database is\nused.</li>\n<li>collation (optional): An instance of\nCollation.</li>\n<li>**kwargs (optional): additional keyword arguments will\nbe passed as options for the create collection command</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 3.0: Added the codec_options, read_preference, and write_concern options.</p>\n\n\n<p>Changed in version 2.2: Removed deprecated argument: options</p>\n\n\ncurrent_op(<em>include_all=False</em>)<p>Get information on operations currently running.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>include_all (optional): if True also list currently\nidle operations in the result</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ndereference(<em>dbref</em>, <em>**kwargs</em>)<p>Dereference a DBRef, getting the\ndocument it points to.</p>\n<p>Raises TypeError if dbref is not an instance of\nDBRef. Returns a document, or None if\nthe reference does not point to a valid document.  Raises\nValueError if dbref has a database specified that\nis different from the current database.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>dbref: the reference</li>\n<li>**kwargs (optional): any additional keyword arguments\nare the same as the arguments to\nfind().</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ndrop_collection(<em>name_or_collection</em>)<p>Drop a collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name_or_collection: the name of a collection to drop or the\ncollection object itself</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis database is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this database’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\nerror()<p><strong>DEPRECATED</strong>: Get the error if one occurred on the last operation.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern w=1 and report their\nerrors by default.</p>\n\n<p>Changed in version 2.8: Deprecated.</p>\n\n\neval(<em>code</em>, <em>*args</em>)<p>Evaluate a JavaScript expression in MongoDB.</p>\n<p>Useful if you need to touch a lot of data lightly; in such a\nscenario the network transfer of the data could be a\nbottleneck. The code argument must be a JavaScript\nfunction. Additional positional arguments will be passed to\nthat function when it is run on the server.</p>\n<p>Raises TypeError if code is not an instance of\nbasestring (str in python 3) or Code.\nRaises OperationFailure if the eval\nfails. Returns the result of the evaluation.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>code: string representation of JavaScript code to be\nevaluated</li>\n<li>args (optional): additional positional arguments are\npassed to the code being evaluated</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">the eval command is deprecated in MongoDB 3.0 and\nwill be removed in a future server version.</p>\n\n\nget_collection(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)<p>Get a Collection with the given name\nand options.</p>\n<p>Useful for creating a Collection with\ndifferent codec options, read preference, and/or write concern from\nthis Database.</p>\n<pre>&gt;&gt;&gt; db.read_preference\nPrimary()\n&gt;&gt;&gt; coll1 = db.test\n&gt;&gt;&gt; coll1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; coll2 = db.get_collection(\n...     'test', read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; coll2.read_preference\nSecondary(tag_sets=None)\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: The name of the collection - a string.</li>\n<li>codec_options (optional): An instance of\nCodecOptions. If None (the\ndefault) the codec_options of this Database is\nused.</li>\n<li>read_preference (optional): The read preference to use. If\nNone (the default) the read_preference of this\nDatabase is used. See read_preferences\nfor options.</li>\n<li>write_concern (optional): An instance of\nWriteConcern. If None (the\ndefault) the write_concern of this Database is\nused.</li>\n<li>read_concern (optional): An instance of\nReadConcern. If None (the\ndefault) the read_concern of this Database is\nused.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nlast_status()<p><strong>DEPRECATED</strong>: Get status information from the last operation.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern w=1 and report their\nerrors by default.</p>\n<p>Returns a SON object with status information.</p>\n\n<p>Changed in version 2.8: Deprecated.</p>\n\n\nlogout()<p>Deauthorize use of this database for this client instance.</p>\n\nprevious_error()<p><strong>DEPRECATED</strong>: Get the most recent error on this database.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern w=1 and report their\nerrors by default.</p>\n<p>Only returns errors that have occurred since the last call to\nreset_error_history(). Returns None if no such errors have\noccurred.</p>\n\n<p>Changed in version 2.8: Deprecated.</p>\n\n\nprofiling_info()<p>Returns a list containing current profiling information.</p>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>profiling</em></p>\n\n\nprofiling_level()<p>Get the database’s current profiling level.</p>\n<p>Returns one of (OFF,\nSLOW_ONLY, ALL).</p>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>profiling</em></p>\n\n\nremove_user(<em>name</em>)<p>Remove user name from this Database.</p>\n<p>User name will no longer have permissions to access this\nDatabase.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: the name of the user to remove</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nreset_error_history()<p><strong>DEPRECATED</strong>: Reset the error history of this database.</p>\n<p>This method is obsolete: all MongoDB write operations (insert, update,\nremove, and so on) use the write concern w=1 and report their\nerrors by default.</p>\n<p>Calls to previous_error() will only return errors that have\noccurred since the most recent call to this method.</p>\n\n<p>Changed in version 2.8: Deprecated.</p>\n\n\nset_profiling_level(<em>level</em>, <em>slow_ms=None</em>)<p>Set the database’s profiling level.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>level: Specifies a profiling level, see list of possible values\nbelow.</li>\n<li>slow_ms: Optionally modify the threshold for the profile to\nconsider a query or operation.  Even if the profiler is off queries\nslower than the slow_ms level will get written to the logs.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Possible level values:</p>\n<table>\n<colgroup>\n<col></col>\n<col></col>\n</colgroup>\n<thead valign="bottom">\n<tr><th>Level</th>\n<th>Setting</th>\n</tr>\n</thead>\n<tbody valign="top">\n<tr><td>OFF</td>\n<td>Off. No profiling.</td>\n</tr>\n<tr><td>SLOW_ONLY</td>\n<td>On. Only includes slow operations.</td>\n</tr>\n<tr><td>ALL</td>\n<td>On. Includes all operations.</td>\n</tr>\n</tbody>\n</table>\n<p>Raises ValueError if level is not one of\n(OFF, SLOW_ONLY,\nALL).</p>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>profiling</em></p>\n\n\nvalidate_collection(<em>name_or_collection</em>, <em>scandata=False</em>, <em>full=False</em>)<p>Validate a collection.</p>\n<p>Returns a dict of validation info. Raises CollectionInvalid if\nvalidation fails.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name_or_collection: A Collection object or the name of a\ncollection to validate.</li>\n<li>scandata: Do extra checks beyond checking the overall\nstructure of the collection.</li>\n<li>full: Have the server do a more thorough scan of the\ncollection. Use with scandata for a thorough scan\nof the structure of the collection and the individual\ndocuments.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ncodec_options<p>Read only access to the CodecOptions\nof this instance.</p>\n\nread_preference<p>Read only access to the read preference of this instance.</p>\n\n<p>Changed in version 3.0: The read_preference attribute is now read only.</p>\n\n\nwrite_concern<p>Read only access to the WriteConcern\nof this instance.</p>\n\n<p>Changed in version 3.0: The write_concern attribute is now read only.</p>\n\n\nclient<p>The client instance for this Database.</p>\n\nincoming_copying_manipulators<p>All incoming SON copying manipulators installed on this instance.</p>\n\n<p>New in version 2.0.</p>\n\n\nincoming_manipulators<p>All incoming SON manipulators installed on this instance.</p>\n\n<p>New in version 2.0.</p>\n\n\nname<p>The name of this Database.</p>\n\noutgoing_copying_manipulators<p>List all outgoing SON copying manipulators\ninstalled on this instance.</p>\n\n<p>New in version 2.0.</p>\n\n\noutgoing_manipulators<p>List all outgoing SON manipulators\ninstalled on this instance.</p>\n\n<p>New in version 2.0.</p>\n\n\nsystem_js<p>A SystemJS helper for this Database.</p>\n<p>See the documentation for SystemJS for more details.</p>\n\ndb[collection_name] || db.collection_name<p>Get the collection_name Collection of\nDatabase db.</p>\n<p>Raises InvalidName if an invalid collection\nname is used.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">Use dictionary style access if collection_name is an\nattribute of the Database class eg: db[collection_name].</p>\n\n<p>Get a database by client and name.</p>\n<p>Raises TypeError if <code>name</code> is not an instance of\nbasestring (str in python 3). Raises\nInvalidName if <code>name</code> is not a valid\ndatabase name.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>client</code>: A MongoClient instance.</li>\n<li><code>name</code>: The database name.</li>\n<li><code>codec_options</code> (optional): An instance of\nCodecOptions. If None (the\ndefault) client.codec_options is used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\nNone (the default) client.read_preference is used.</li>\n<li><code>write_concern</code> (optional): An instance of\nWriteConcern. If None (the\ndefault) client.write_concern is used.</li>\n<li><code>read_concern</code> (optional): An instance of\nReadConcern. If None (the\ndefault) client.read_concern is used.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>databases</em></p>\n\n\n<p>Changed in version 3.2: Added the read_concern option.</p>\n\n\n<p>Changed in version 3.0: Added the codec_options, read_preference, and write_concern options.\nDatabase no longer returns an instance\nof Collection for attribute names\nwith leading underscores. You must use dict-style lookups instead::</p>\n\ndb[‘__my_collection__’]\n<p>Not:</p>\n\ndb.__my_collection__\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.Database
pymongo database SystemJS	A										<section class="prog_container"><pre><code>\nclass pymongo.database.SystemJS(<em>database</em>)</pre></code><p>\nlist()<p>Get a list of the names of the functions stored in this database.</p>\n<p>Get a system js helper for the database <code>database</code>.</p>\n<p>An instance of SystemJS can be created with an instance\nof Database through Database.system_js,\nmanual instantiation of this class should not be necessary.</p>\n<p>SystemJS instances allow for easy manipulation and\naccess to server-side JavaScript:</p>\n<pre>&gt;&gt;&gt; db.system_js.add1 = "function (x) { return x + 1; }"\n&gt;&gt;&gt; db.system.js.find({"_id": "add1"}).count()\n1\n&gt;&gt;&gt; db.system_js.add1(5)\n6.0\n&gt;&gt;&gt; del db.system_js.add1\n&gt;&gt;&gt; db.system.js.find({"_id": "add1"}).count()\n0\n</pre>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.database.SystemJS
pymongo auth MECHANISMS	A										<section class="prog_container"><pre><code>\npymongo.auth.MECHANISMS = frozenset(['MONGODB-X509', 'DEFAULT', 'PLAIN', 'GSSAPI', 'MONGODB-CR', 'SCRAM-SHA-1'])</pre></code><p><p>The authentication mechanisms supported by PyMongo.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.auth.MECHANISMS
pymongo OFF	A										<section class="prog_container"><pre><code>\npymongo.OFF = 0</pre></code><p><p>No database profiling.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.OFF
pymongo SLOW_ONLY	A										<section class="prog_container"><pre><code>\npymongo.SLOW_ONLY = 1</pre></code><p><p>Only profile slow operations.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.SLOW_ONLY
pymongo ALL	A										<section class="prog_container"><pre><code>\npymongo.ALL = 2</pre></code><p><p>Profile all operations.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/database.html#pymongo.ALL
pymongo collation Collation	A										<section class="prog_container"><pre><code>\nclass pymongo.collation.Collation(<em>locale</em>, <em>caseLevel=None</em>, <em>caseFirst=None</em>, <em>strength=None</em>, <em>numericOrdering=None</em>, <em>alternate=None</em>, <em>maxVariable=None</em>, <em>normalization=None</em>, <em>backwards=None</em>, <em>**kwargs</em>)</pre></code><p><table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><p class="first"><code>locale</code>: (string) The locale of the collation. This should be a string\nthat identifies an <code>ICU locale ID</code> exactly. For example, en_US is\nvalid, but en_us and en-US are not. Consult the MongoDB\ndocumentation for a list of supported locales.</p>\n</li>\n<li><p class="first"><code>caseLevel</code>: (optional) If True, turn on case sensitivity if\n<code>strength</code> is 1 or 2 (case sensitivity is implied if <code>strength</code> is\ngreater than 2). Defaults to False.</p>\n</li>\n<li><p class="first"><code>caseFirst</code>: (optional) Specify that either uppercase or lowercase\ncharacters take precedence. Must be one of the following values:</p>\n\n<ul>\n<li>UPPER</li>\n<li>LOWER</li>\n<li>OFF (the default)</li>\n</ul>\n\n</li>\n<li><p class="first"><code>strength</code>: (optional) Specify the comparison strength. This is also\nknown as the ICU comparison level. This must be one of the following\nvalues:</p>\n\n<ul>\n<li>PRIMARY</li>\n<li>SECONDARY</li>\n<li>TERTIARY (the default)</li>\n<li>QUATERNARY</li>\n<li>IDENTICAL</li>\n</ul>\n\n<p>Each successive level builds upon the previous. For example, a\n<code>strength</code> of SECONDARY differentiates\ncharacters based both on the unadorned base character and its accents.</p>\n</li>\n<li><p class="first"><code>numericOrdering</code>: (optional) If True, order numbers numerically\ninstead of in collation order (defaults to False).</p>\n</li>\n<li><p class="first"><code>alternate</code>: (optional) Specify whether spaces and punctuation are\nconsidered base characters. This must be one of the following values:</p>\n\n<ul>\n<li>NON_IGNORABLE (the default)</li>\n<li>SHIFTED</li>\n</ul>\n\n</li>\n<li><p class="first"><code>maxVariable</code>: (optional) When <code>alternate</code> is\nSHIFTED, this option specifies what\ncharacters may be ignored. This must be one of the following values:</p>\n\n<ul>\n<li>PUNCT (the default)</li>\n<li>SPACE</li>\n</ul>\n\n</li>\n<li><p class="first"><code>normalization</code>: (optional) If True, normalizes text into Unicode\nNFD. Defaults to False.</p>\n</li>\n<li><p class="first"><code>backwards</code>: (optional) If True, accents on characters are\nconsidered from the back of the word to the front, as it is done in some\nFrench dictionary ordering traditions. Defaults to False.</p>\n</li>\n<li><p class="first"><code>kwargs</code>: (optional) Keyword arguments supplying any additional options\nto be sent with this Collation object.</p>\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.Collation
pymongo collation CollationStrength	A										<section class="prog_container"><pre><code>\nclass pymongo.collation.CollationStrength</pre></code><p>\nPRIMARY = 1<p>Differentiate base (unadorned) characters.</p>\n\nSECONDARY = 2<p>Differentiate character accents.</p>\n\nTERTIARY = 3<p>Differentiate character case.</p>\n\nQUATERNARY = 4<p>Differentiate words with and without punctuation.</p>\n\nIDENTICAL = 5<p>Differentiate unicode code point (characters are exactly identical).</p>\n<p>An enum that defines values for <code>strength</code> on a\nCollation.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationStrength
pymongo collation CollationAlternate	A										<section class="prog_container"><pre><code>\nclass pymongo.collation.CollationAlternate</pre></code><p>\nNON_IGNORABLE = 'non-ignorable'<p>Spaces and punctuation are treated as base characters.</p>\n\nSHIFTED = 'shifted'<p>Spaces and punctuation are <em>not</em> considered base characters.</p>\n<p>Spaces and punctuation are distinguished regardless when the\nCollation strength is at least\nQUATERNARY.</p>\n<p>An enum that defines values for <code>alternate</code> on a\nCollation.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationAlternate
pymongo collation CollationCaseFirst	A										<section class="prog_container"><pre><code>\nclass pymongo.collation.CollationCaseFirst</pre></code><p>\nUPPER = 'upper'<p>Sort uppercase characters first.</p>\n\nLOWER = 'lower'<p>Sort lowercase characters first.</p>\n\nOFF = 'off'<p>Default for locale or collation strength.</p>\n<p>An enum that defines values for <code>case_first</code> on a\nCollation.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationCaseFirst
pymongo collation CollationMaxVariable	A										<section class="prog_container"><pre><code>\nclass pymongo.collation.CollationMaxVariable</pre></code><p>\nPUNCT = 'punct'<p>Both punctuation and spaces are ignored.</p>\n\nSPACE = 'space'<p>Spaces alone are ignored.</p>\n<p>An enum that defines values for <code>max_variable</code> on a\nCollation.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collation.html#pymongo.collation.CollationMaxVariable
pymongo collection ReturnDocument	A										<section class="prog_container"><pre><code>\nclass pymongo.collection.ReturnDocument</pre></code><p>\nBEFORE<p>Return the original document before it was updated/replaced, or\nNone if no document matches the query.</p>\n\nAFTER<p>Return the updated/replaced or inserted document.</p>\n<p>An enum used with\nfind_one_and_replace() and\nfind_one_and_update().</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.ReturnDocument
pymongo collection Collection	A										<section class="prog_container"><pre><code>\nclass pymongo.collection.Collection(<em>database</em>, <em>name</em>, <em>create=False</em>, <em>**kwargs</em>)</pre></code><p>\nwith_options(<em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)<p>Get a clone of this collection changing the specified settings.</p>\n<pre>&gt;&gt;&gt; coll1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; coll2 = coll1.with_options(read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; coll1.read_preference\nPrimary()\n&gt;&gt;&gt; coll2.read_preference\nSecondary(tag_sets=None)\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>codec_options (optional): An instance of\nCodecOptions. If None (the\ndefault) the codec_options of this Collection\nis used.</li>\n<li>read_preference (optional): The read preference to use. If\nNone (the default) the read_preference of this\nCollection is used. See read_preferences\nfor options.</li>\n<li>write_concern (optional): An instance of\nWriteConcern. If None (the\ndefault) the write_concern of this Collection\nis used.</li>\n<li>read_concern (optional): An instance of\nReadConcern. If None (the\ndefault) the read_concern of this Collection\nis used.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nbulk_write(<em>requests</em>, <em>ordered=True</em>, <em>bypass_document_validation=False</em>)<p>Send a batch of write operations to the server.</p>\n<p>Requests are passed as a list of write operation instances (\nInsertOne,\nUpdateOne,\nUpdateMany,\nReplaceOne,\nDeleteOne, or\nDeleteMany).</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634ef')}\n{u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634f0')}\n&gt;&gt;&gt; # DeleteMany, UpdateOne, and UpdateMany are also available.\n...\n&gt;&gt;&gt; from pymongo import InsertOne, DeleteOne, ReplaceOne\n&gt;&gt;&gt; requests = [InsertOne({'y': 1}), DeleteOne({'x': 1}),\n...             ReplaceOne({'w': 1}, {'z': 1}, upsert=True)]\n&gt;&gt;&gt; result = db.test.bulk_write(requests)\n&gt;&gt;&gt; result.inserted_count\n1\n&gt;&gt;&gt; result.deleted_count\n1\n&gt;&gt;&gt; result.modified_count\n0\n&gt;&gt;&gt; result.upserted_ids\n{2: ObjectId('54f62ee28891e756a6e1abd5')}\n&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': ObjectId('54f62e60fba5226811f634f0')}\n{u'y': 1, u'_id': ObjectId('54f62ee2fba5226811f634f1')}\n{u'z': 1, u'_id': ObjectId('54f62ee28891e756a6e1abd5')}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>requests: A list of write operations (see examples above).</li>\n<li>ordered (optional): If True (the default) requests will be\nperformed on the server serially, in the order provided. If an error\noccurs all remaining operations are aborted. If False requests\nwill be performed on the server in arbitrary order, possibly in\nparallel, and all operations will be attempted.</li>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p class="first last">An instance of BulkWriteResult.</p>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="last">Why does PyMongo add an _id field to all of my documents?</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 3.0.</p>\n\n\ninsert_one(<em>document</em>, <em>bypass_document_validation=False</em>)<p>Insert a single document.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n0\n&gt;&gt;&gt; result = db.test.insert_one({'x': 1})\n&gt;&gt;&gt; result.inserted_id\nObjectId('54f112defba522406c9cc208')\n&gt;&gt;&gt; db.test.find_one({'x': 1})\n{u'x': 1, u'_id': ObjectId('54f112defba522406c9cc208')}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>document: The document to insert. Must be a mutable mapping\ntype. If the document does not have an _id field one will be\nadded automatically.</li>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>An instance of InsertOneResult.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="last">Why does PyMongo add an _id field to all of my documents?</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 3.0.</p>\n\n\ninsert_many(<em>documents</em>, <em>ordered=True</em>, <em>bypass_document_validation=False</em>)<p>Insert an iterable of documents.</p>\n<pre>&gt;&gt;&gt; db.test.count()\n0\n&gt;&gt;&gt; result = db.test.insert_many([{'x': i} for i in range(2)])\n&gt;&gt;&gt; result.inserted_ids\n[ObjectId('54f113fffba522406c9cc20e'), ObjectId('54f113fffba522406c9cc20f')]\n&gt;&gt;&gt; db.test.count()\n2\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>documents: A iterable of documents to insert.</li>\n<li>ordered (optional): If True (the default) documents will be\ninserted on the server serially, in the order provided. If an error\noccurs all remaining inserts are aborted. If False, documents\nwill be inserted on the server in arbitrary order, possibly in\nparallel, and all document inserts will be attempted.</li>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p class="first last">An instance of InsertManyResult.</p>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="last">Why does PyMongo add an _id field to all of my documents?</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 3.0.</p>\n\n\nreplace_one(<em>filter</em>, <em>replacement</em>, <em>upsert=False</em>, <em>bypass_document_validation=False</em>, <em>collation=None</em>)<p>Replace a single document matching the filter.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': ObjectId('54f4c5befba5220aa4d6dee7')}\n&gt;&gt;&gt; result = db.test.replace_one({'x': 1}, {'y': 1})\n&gt;&gt;&gt; result.matched_count\n1\n&gt;&gt;&gt; result.modified_count\n1\n&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'y': 1, u'_id': ObjectId('54f4c5befba5220aa4d6dee7')}\n</pre>\n\n<p>The <em>upsert</em> option can be used to insert a new document if a matching\ndocument does not exist.</p>\n<pre>&gt;&gt;&gt; result = db.test.replace_one({'x': 1}, {'x': 1}, True)\n&gt;&gt;&gt; result.matched_count\n0\n&gt;&gt;&gt; result.modified_count\n0\n&gt;&gt;&gt; result.upserted_id\nObjectId('54f11e5c8891e756a6e1abd4')\n&gt;&gt;&gt; db.test.find_one({'x': 1})\n{u'x': 1, u'_id': ObjectId('54f11e5c8891e756a6e1abd4')}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the document to replace.</li>\n<li>replacement: The new document.</li>\n<li>upsert (optional): If True, perform an insert if no documents\nmatch the filter.</li>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>An instance of UpdateResult.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 3.0.</p>\n\n\nupdate_one(<em>filter</em>, <em>update</em>, <em>upsert=False</em>, <em>bypass_document_validation=False</em>, <em>collation=None</em>)<p>Update a single document matching the filter.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; result = db.test.update_one({'x': 1}, {'$inc': {'x': 3}})\n&gt;&gt;&gt; result.matched_count\n1\n&gt;&gt;&gt; result.modified_count\n1\n&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 4, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the document to update.</li>\n<li>update: The modifications to apply.</li>\n<li>upsert (optional): If True, perform an insert if no documents\nmatch the filter.</li>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>An instance of UpdateResult.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 3.0.</p>\n\n\nupdate_many(<em>filter</em>, <em>update</em>, <em>upsert=False</em>, <em>bypass_document_validation=False</em>, <em>collation=None</em>)<p>Update one or more documents that match the filter.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; result = db.test.update_many({'x': 1}, {'$inc': {'x': 3}})\n&gt;&gt;&gt; result.matched_count\n3\n&gt;&gt;&gt; result.modified_count\n3\n&gt;&gt;&gt; for doc in db.test.find():\n...     print(doc)\n...\n{u'x': 4, u'_id': 0}\n{u'x': 4, u'_id': 1}\n{u'x': 4, u'_id': 2}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the documents to update.</li>\n<li>update: The modifications to apply.</li>\n<li>upsert (optional): If True, perform an insert if no documents\nmatch the filter.</li>\n<li>bypass_document_validation (optional): If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>An instance of UpdateResult.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 3.0.</p>\n\n\ndelete_one(<em>filter</em>, <em>collation=None</em>)<p>Delete a single document matching the filter.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n3\n&gt;&gt;&gt; result = db.test.delete_one({'x': 1})\n&gt;&gt;&gt; result.deleted_count\n1\n&gt;&gt;&gt; db.test.count({'x': 1})\n2\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the document to delete.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>An instance of DeleteResult.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>New in version 3.0.</p>\n\n\ndelete_many(<em>filter</em>, <em>collation=None</em>)<p>Delete one or more documents matching the filter.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n3\n&gt;&gt;&gt; result = db.test.delete_many({'x': 1})\n&gt;&gt;&gt; result.deleted_count\n3\n&gt;&gt;&gt; db.test.count({'x': 1})\n0\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the documents to delete.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>An instance of DeleteResult.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>New in version 3.0.</p>\n\n\naggregate(<em>pipeline</em>, <em>**kwargs</em>)<p>Perform an aggregation using the aggregation framework on this\ncollection.</p>\n<p>All optional aggregate parameters should be passed as keyword arguments\nto this method. Valid options include, but are not limited to:</p>\n\n<ul>\n<li>allowDiskUse (bool): Enables writing to temporary files. When set\nto True, aggregation stages can write data to the _tmp subdirectory\nof the –dbpath directory. The default is False.</li>\n<li>maxTimeMS (int): The maximum amount of time to allow the operation\nto run in milliseconds.</li>\n<li>batchSize (int): The maximum number of documents to return per\nbatch. Ignored if the connected mongod or mongos does not support\nreturning aggregate results using a cursor, or useCursor is\nFalse.</li>\n<li>useCursor (bool): Requests that the server provide results\nusing a cursor, if possible. Ignored if the connected mongod or\nmongos does not support returning aggregate results using a cursor.\nThe default is True. Set this to False when upgrading a 2.4\nor older sharded cluster to 2.6 or newer (see the warning below).</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n\n<p>The aggregate() method obeys the read_preference of this\nCollection. Please note that using the $out pipeline stage\nrequires a read preference of\nPRIMARY (the default).\nThe server will raise an error if the $out pipeline stage is used\nwith any other read preference.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">When upgrading a 2.4 or older sharded cluster to 2.6 or\nnewer the useCursor option <strong>must</strong> be set to False\nuntil all shards have been upgraded to 2.6 or newer.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">This method does not support the ‘explain’ option. Please\nuse command() instead. An\nexample is included in the Aggregation Framework documentation.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>pipeline: a list of aggregation pipeline stages</li>\n<li>**kwargs (optional): See list of options above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><p class="first last">A CommandCursor over the result\nset.</p>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4. Support the collation option.</p>\n\n\n<p>Changed in version 3.0: The aggregate() method always returns a CommandCursor. The\npipeline argument must be a list.</p>\n\n\n<p>Changed in version 2.7: When the cursor option is used, return\nCommandCursor instead of\nCursor.</p>\n\n\n<p>Changed in version 2.6: Added cursor support.</p>\n\n\n<p>New in version 2.3.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last"><em>Aggregation Examples</em></p>\n\n\nfind(<em>filter=None</em>, <em>projection=None</em>, <em>skip=0</em>, <em>limit=0</em>, <em>no_cursor_timeout=False</em>, <em>cursor_type=CursorType.NON_TAILABLE</em>, <em>sort=None</em>, <em>allow_partial_results=False</em>, <em>oplog_replay=False</em>, <em>modifiers=None</em>, <em>manipulate=True</em>)<p>Query the database.</p>\n<p>The filter argument is a prototype document that all results\nmust match. For example:</p>\n<pre>&gt;&gt;&gt; db.test.find({"hello": "world"})\n</pre>\n\n<p>only matches documents that have a key “hello” with value\n“world”.  Matches can have other keys <em>in addition</em> to\n“hello”. The projection argument is used to specify a subset\nof fields that should be included in the result documents. By\nlimiting results to a certain subset of fields you can cut\ndown on network traffic and decoding time.</p>\n<p>Raises TypeError if any of the arguments are of\nimproper type. Returns an instance of\nCursor corresponding to this query.</p>\n<p>The find() method obeys the read_preference of\nthis Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><p class="first">filter (optional): a SON object specifying elements which\nmust be present for a document to be included in the\nresult set</p>\n</li>\n<li><p class="first">projection (optional): a list of field names that should be\nreturned in the result set or a dict specifying the fields\nto include or exclude. If projection is a list “_id” will\nalways be returned. Use a dict to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</p>\n</li>\n<li><p class="first">skip (optional): the number of documents to omit (from\nthe start of the result set) when returning the results</p>\n</li>\n<li><p class="first">limit (optional): the maximum number of results to\nreturn</p>\n</li>\n<li><p class="first">no_cursor_timeout (optional): if False (the default), any\nreturned cursor is closed by the server after 10 minutes of\ninactivity. If set to True, the returned cursor will never\ntime out on the server. Care should be taken to ensure that\ncursors with no_cursor_timeout turned on are properly closed.</p>\n</li>\n<li><p class="first">cursor_type (optional): the type of cursor to return. The valid\noptions are defined by CursorType:</p>\n<ul>\n<li>NON_TAILABLE - the result of\nthis find call will return a standard cursor over the result set.</li>\n<li>TAILABLE - the result of this\nfind call will be a tailable cursor - tailable cursors are only\nfor use with capped collections. They are not closed when the\nlast data is retrieved but are kept open and the cursor location\nmarks the final document position. If more data is received\niteration of the cursor will continue from the last document\nreceived. For details, see the tailable cursor documentation.</li>\n<li>TAILABLE_AWAIT - the result\nof this find call will be a tailable cursor with the await flag\nset. The server will wait for a few seconds after returning the\nfull result set so that it can capture and return additional data\nadded during the query.</li>\n<li>EXHAUST - the result of this\nfind call will be an exhaust cursor. MongoDB will stream batched\nresults to the client without waiting for the client to request\neach batch, reducing latency. See notes on compatibility below.</li>\n</ul>\n</li>\n<li><p class="first">sort (optional): a list of (key, direction) pairs\nspecifying the sort order for this query. See\nsort() for details.</p>\n</li>\n<li><p class="first">allow_partial_results (optional): if True, mongos will return\npartial results if some shards are down instead of returning an\nerror.</p>\n</li>\n<li><p class="first">oplog_replay (optional): If True, set the oplogReplay query\nflag.</p>\n</li>\n<li><p class="first">modifiers (optional): A dict specifying the MongoDB query\nmodifiers that should be used for this query. For example:</p>\n<pre>&gt;&gt;&gt; db.test.find(modifiers={"$maxTimeMS": 500})\n</pre>\n\n</li>\n<li><p class="first">batch_size (optional): Limits the number of documents returned in\na single batch.</p>\n</li>\n<li><p class="first">manipulate (optional): <strong>DEPRECATED</strong> - If True (the default),\napply any outgoing SON manipulators before returning.</p>\n</li>\n<li><p class="first">collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</p>\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p>There are a number of caveats to using\nEXHAUST as cursor_type:</p>\n<ul>\n<li>The limit option can not be used with an exhaust cursor.</li>\n<li>Exhaust cursors are not supported by mongos and can not be\nused with a sharded cluster.</li>\n<li>A Cursor instance created with the\nEXHAUST cursor_type requires an\nexclusive socket connection to MongoDB. If the\nCursor is discarded without being\ncompletely iterated the underlying socket\nconnection will be closed and discarded without being returned to\nthe connection pool.</li>\n</ul>\n\n\n<p>Changed in version 3.4: Support the collation option.</p>\n\n\n<p>Changed in version 3.0: Changed the parameter names spec, fields, timeout, and\npartial to filter, projection, no_cursor_timeout, and\nallow_partial_results respectively.\nAdded the cursor_type, oplog_replay, and modifiers options.\nRemoved the network_timeout, read_preference, tag_sets,\nsecondary_acceptable_latency_ms, max_scan, snapshot,\ntailable, await_data, exhaust, as_class, and slave_okay\nparameters. Removed compile_re option: PyMongo now always\nrepresents BSON regular expressions as Regex\nobjects. Use try_compile() to attempt to\nconvert from a BSON regular expression to a Python regular\nexpression object. Soft deprecated the manipulate option.</p>\n\n\n<p>Changed in version 2.7: Added compile_re option. If set to False, PyMongo represented BSON\nregular expressions as Regex objects instead of\nattempting to compile BSON regular expressions as Python native\nregular expressions, thus preventing errors for some incompatible\npatterns, see PYTHON-500.</p>\n\n\n<p>New in version 2.3: The tag_sets and secondary_acceptable_latency_ms parameters.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>find</em></p>\n\n\nfind_one(<em>filter=None</em>, <em>*args</em>, <em>**kwargs</em>)<p>Get a single document from the database.</p>\n<p>All arguments to find() are also valid arguments for\nfind_one(), although any limit argument will be\nignored. Returns a single document, or None if no matching\ndocument is found.</p>\n<p>The find_one() method obeys the read_preference of\nthis Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><p class="first">filter (optional): a dictionary specifying\nthe query to be performed OR any other type to be used as\nthe value for a query for "_id".</p>\n</li>\n<li><p class="first">*args (optional): any additional positional arguments\nare the same as the arguments to find().</p>\n</li>\n<li><p class="first">**kwargs (optional): any additional keyword arguments\nare the same as the arguments to find().</p>\n</li>\n<li><p class="first">max_time_ms (optional): a value for max_time_ms may be\nspecified as part of **kwargs, e.g.</p>\n<pre>&gt;&gt;&gt; find_one(max_time_ms=100)\n</pre>\n\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nfind_one_and_delete(<em>filter</em>, <em>projection=None</em>, <em>sort=None</em>, <em>**kwargs</em>)<p>Finds a single document and deletes it, returning the document.</p>\n<pre>&gt;&gt;&gt; db.test.count({'x': 1})\n2\n&gt;&gt;&gt; db.test.find_one_and_delete({'x': 1})\n{u'x': 1, u'_id': ObjectId('54f4e12bfba5220aa4d6dee8')}\n&gt;&gt;&gt; db.test.count({'x': 1})\n1\n</pre>\n\n<p>If multiple documents match <em>filter</em>, a <em>sort</em> can be applied.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({'x': 1}):\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; db.test.find_one_and_delete(\n...     {'x': 1}, sort=[('_id', pymongo.DESCENDING)])\n{u'x': 1, u'_id': 2}\n</pre>\n\n<p>The <em>projection</em> option can be used to limit the fields returned.</p>\n<pre>&gt;&gt;&gt; db.test.find_one_and_delete({'x': 1}, projection={'_id': False})\n{u'x': 1}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the document to delete.</li>\n<li>projection (optional): a list of field names that should be\nreturned in the result document or a mapping specifying the fields\nto include or exclude. If projection is a list “_id” will\nalways be returned. Use a mapping to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</li>\n<li>sort (optional): a list of (key, direction) pairs\nspecifying the sort order for the query. If multiple documents\nmatch the query, they are sorted and the first is deleted.</li>\n<li>**kwargs (optional): additional command arguments can be passed\nas keyword arguments (for example maxTimeMS can be used with\nrecent server versions).</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.2: Respects write concern.</p>\n\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Starting in PyMongo 3.2, this command uses the\nWriteConcern of this\nCollection when connected to MongoDB &gt;=\n3.2. Note that using an elevated write concern with this command may\nbe slower compared to using the default write concern.</p>\n\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>New in version 3.0.</p>\n\n\nfind_one_and_replace(<em>filter</em>, <em>replacement</em>, <em>projection=None</em>, <em>sort=None</em>, <em>return_document=ReturnDocument.BEFORE</em>, <em>**kwargs</em>)<p>Finds a single document and replaces it, returning either the\noriginal or the replaced document.</p>\n<p>The find_one_and_replace() method differs from\nfind_one_and_update() by replacing the document matched by\n<em>filter</em>, rather than modifying the existing document.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'x': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n&gt;&gt;&gt; db.test.find_one_and_replace({'x': 1}, {'y': 1})\n{u'x': 1, u'_id': 0}\n&gt;&gt;&gt; for doc in db.test.find({}):\n...     print(doc)\n...\n{u'y': 1, u'_id': 0}\n{u'x': 1, u'_id': 1}\n{u'x': 1, u'_id': 2}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the document to replace.</li>\n<li>replacement: The replacement document.</li>\n<li>projection (optional): A list of field names that should be\nreturned in the result document or a mapping specifying the fields\nto include or exclude. If projection is a list “_id” will\nalways be returned. Use a mapping to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</li>\n<li>sort (optional): a list of (key, direction) pairs\nspecifying the sort order for the query. If multiple documents\nmatch the query, they are sorted and the first is replaced.</li>\n<li>upsert (optional): When True, inserts a new document if no\ndocument matches the query. Defaults to False.</li>\n<li>return_document: If\nReturnDocument.BEFORE (the default),\nreturns the original document before it was replaced, or None\nif no document matches. If\nReturnDocument.AFTER, returns the replaced\nor inserted document.</li>\n<li>**kwargs (optional): additional command arguments can be passed\nas keyword arguments (for example maxTimeMS can be used with\nrecent server versions).</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 3.2: Respects write concern.</p>\n\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Starting in PyMongo 3.2, this command uses the\nWriteConcern of this\nCollection when connected to MongoDB &gt;=\n3.2. Note that using an elevated write concern with this command may\nbe slower compared to using the default write concern.</p>\n\n\n<p>New in version 3.0.</p>\n\n\nfind_one_and_update(<em>filter</em>, <em>update</em>, <em>projection=None</em>, <em>sort=None</em>, <em>return_document=ReturnDocument.BEFORE</em>, <em>**kwargs</em>)<p>Finds a single document and updates it, returning either the\noriginal or the updated document.</p>\n<pre>&gt;&gt;&gt; db.test.find_one_and_update(\n...    {'_id': 665}, {'$inc': {'count': 1}, '$set': {'done': True}})\n{u'_id': 665, u'done': False, u'count': 25}}\n</pre>\n\n<p>By default find_one_and_update() returns the original version of\nthe document before the update was applied. To return the updated\nversion of the document instead, use the <em>return_document</em> option.</p>\n<pre>&gt;&gt;&gt; from pymongo import ReturnDocument\n&gt;&gt;&gt; db.example.find_one_and_update(\n...     {'_id': 'userid'},\n...     {'$inc': {'seq': 1}},\n...     return_document=ReturnDocument.AFTER)\n{u'_id': u'userid', u'seq': 1}\n</pre>\n\n<p>You can limit the fields returned with the <em>projection</em> option.</p>\n<pre>&gt;&gt;&gt; db.example.find_one_and_update(\n...     {'_id': 'userid'},\n...     {'$inc': {'seq': 1}},\n...     projection={'seq': True, '_id': False},\n...     return_document=ReturnDocument.AFTER)\n{u'seq': 2}\n</pre>\n\n<p>The <em>upsert</em> option can be used to create the document if it doesn’t\nalready exist.</p>\n<pre>&gt;&gt;&gt; db.example.delete_many({}).deleted_count\n1\n&gt;&gt;&gt; db.example.find_one_and_update(\n...     {'_id': 'userid'},\n...     {'$inc': {'seq': 1}},\n...     projection={'seq': True, '_id': False},\n...     upsert=True,\n...     return_document=ReturnDocument.AFTER)\n{u'seq': 1}\n</pre>\n\n<p>If multiple documents match <em>filter</em>, a <em>sort</em> can be applied.</p>\n<pre>&gt;&gt;&gt; for doc in db.test.find({'done': True}):\n...     print(doc)\n...\n{u'_id': 665, u'done': True, u'result': {u'count': 26}}\n{u'_id': 701, u'done': True, u'result': {u'count': 17}}\n&gt;&gt;&gt; db.test.find_one_and_update(\n...     {'done': True},\n...     {'$set': {'final': True}},\n...     sort=[('_id', pymongo.DESCENDING)])\n{u'_id': 701, u'done': True, u'result': {u'count': 17}}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: A query that matches the document to update.</li>\n<li>update: The update operations to apply.</li>\n<li>projection (optional): A list of field names that should be\nreturned in the result document or a mapping specifying the fields\nto include or exclude. If projection is a list “_id” will\nalways be returned. Use a dict to exclude fields from\nthe result (e.g. projection={‘_id’: False}).</li>\n<li>sort (optional): a list of (key, direction) pairs\nspecifying the sort order for the query. If multiple documents\nmatch the query, they are sorted and the first is updated.</li>\n<li>upsert (optional): When True, inserts a new document if no\ndocument matches the query. Defaults to False.</li>\n<li>return_document: If\nReturnDocument.BEFORE (the default),\nreturns the original document before it was updated, or None\nif no document matches. If\nReturnDocument.AFTER, returns the updated\nor inserted document.</li>\n<li>**kwargs (optional): additional command arguments can be passed\nas keyword arguments (for example maxTimeMS can be used with\nrecent server versions).</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 3.2: Respects write concern.</p>\n\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Starting in PyMongo 3.2, this command uses the\nWriteConcern of this\nCollection when connected to MongoDB &gt;=\n3.2. Note that using an elevated write concern with this command may\nbe slower compared to using the default write concern.</p>\n\n\n<p>New in version 3.0.</p>\n\n\ncount(<em>filter=None</em>, <em>**kwargs</em>)<p>Get the number of documents in this collection.</p>\n<p>All optional count parameters should be passed as keyword arguments\nto this method. Valid options include:</p>\n\n<ul>\n<li>hint (string or list of tuples): The index to use. Specify either\nthe index name as a string or the index specification as a list of\ntuples (e.g. [(‘a’, pymongo.ASCENDING), (‘b’, pymongo.ASCENDING)]).</li>\n<li>limit (int): The maximum number of documents to count.</li>\n<li>skip (int): The number of matching documents to skip before\nreturning results.</li>\n<li>maxTimeMS (int): The maximum amount of time to allow the count\ncommand to run, in milliseconds.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n\n<p>The count() method obeys the read_preference of\nthis Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter (optional): A query document that selects which documents\nto count in the collection.</li>\n<li>**kwargs (optional): See list of options above.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Support the collation option.</p>\n\n\ndistinct(<em>key</em>, <em>filter=None</em>, <em>**kwargs</em>)<p>Get a list of distinct values for key among all documents\nin this collection.</p>\n<p>Raises TypeError if key is not an instance of\nbasestring (str in python 3).</p>\n<p>All optional distinct parameters should be passed as keyword arguments\nto this method. Valid options include:</p>\n\n<ul>\n<li>maxTimeMS (int): The maximum amount of time to allow the count\ncommand to run, in milliseconds.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n\n<p>The distinct() method obeys the read_preference of\nthis Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>key: name of the field for which we want to get the distinct\nvalues</li>\n<li>filter (optional): A query document that specifies the documents\nfrom which to retrieve the distinct values.</li>\n<li>**kwargs (optional): See list of options above.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Support the collation option.</p>\n\n\ncreate_index(<em>keys</em>, <em>**kwargs</em>)<p>Creates an index on this collection.</p>\n<p>Takes either a single key or a list of (key, direction) pairs.\nThe key(s) must be an instance of basestring\n(str in python 3), and the direction(s) must be one of\n(ASCENDING, DESCENDING,\nGEO2D, GEOHAYSTACK,\nGEOSPHERE, HASHED,\nTEXT).</p>\n<p>To create a single key ascending index on the key 'mike' we just\nuse a string argument:</p>\n<pre>&gt;&gt;&gt; my_collection.create_index("mike")\n</pre>\n\n<p>For a compound index on 'mike' descending and 'eliot'\nascending we need to use a list of tuples:</p>\n<pre>&gt;&gt;&gt; my_collection.create_index([("mike", pymongo.DESCENDING),\n...                             ("eliot", pymongo.ASCENDING)])\n</pre>\n\n<p>All optional index creation parameters should be passed as\nkeyword arguments to this method. For example:</p>\n<pre>&gt;&gt;&gt; my_collection.create_index([("mike", pymongo.DESCENDING)],\n...                            background=True)\n</pre>\n\n<p>Valid options include, but are not limited to:</p>\n\n<ul>\n<li>name: custom name to use for this index - if none is\ngiven, a name will be generated.</li>\n<li>unique: if True creates a uniqueness constraint on the index.</li>\n<li>background: if True this index should be created in the\nbackground.</li>\n<li>sparse: if True, omit from the index any documents that lack\nthe indexed field.</li>\n<li>bucketSize: for use with geoHaystack indexes.\nNumber of documents to group together within a certain proximity\nto a given longitude and latitude.</li>\n<li>min: minimum value for keys in a GEO2D\nindex.</li>\n<li>max: maximum value for keys in a GEO2D\nindex.</li>\n<li>expireAfterSeconds: &lt;int&gt; Used to create an expiring (TTL)\ncollection. MongoDB will automatically delete documents from\nthis collection after &lt;int&gt; seconds. The indexed field must\nbe a UTC datetime or the data will not expire.</li>\n<li>partialFilterExpression: A document that specifies a filter for\na partial index.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n\n<p>See the MongoDB documentation for a full list of supported options by\nserver version.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">dropDups is not supported by MongoDB 3.0 or newer. The\noption is silently ignored by the server and unique index builds\nusing the option will fail if a duplicate value is detected.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">partialFilterExpression requires server version <strong>&gt;= 3.2</strong></p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>keys: a single key or a list of (key, direction)\npairs specifying the index to create</li>\n<li>**kwargs (optional): any additional index creation\noptions (see the above list) should be passed as keyword\narguments</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4. Support the collation option.</p>\n\n\n<p>Changed in version 3.2: Added partialFilterExpression to support partial indexes.</p>\n\n\n<p>Changed in version 3.0: Renamed key_or_list to keys. Removed the cache_for option.\ncreate_index() no longer caches index names. Removed support\nfor the drop_dups and bucket_size aliases.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>indexes</em></p>\n\n\ncreate_indexes(<em>indexes</em>)<p>Create one or more indexes on this collection.</p>\n<pre>&gt;&gt;&gt; from pymongo import IndexModel, ASCENDING, DESCENDING\n&gt;&gt;&gt; index1 = IndexModel([("hello", DESCENDING),\n...                      ("world", ASCENDING)], name="hello_world")\n&gt;&gt;&gt; index2 = IndexModel([("goodbye", DESCENDING)])\n&gt;&gt;&gt; db.test.create_indexes([index1, index2])\n["hello_world"]\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>indexes: A list of IndexModel\ninstances.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">create_indexes uses the createIndexes command\nintroduced in MongoDB <strong>2.6</strong> and cannot be used with earlier\nversions.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\n<p>New in version 3.0.</p>\n\n\ndrop_index(<em>index_or_name</em>)<p>Drops the specified index on this collection.</p>\n<p>Can be used on non-existant collections or collections with no\nindexes.  Raises OperationFailure on an error (e.g. trying to\ndrop an index that does not exist). index_or_name\ncan be either an index name (as returned by create_index),\nor an index specifier (as passed to create_index). An index\nspecifier should be a list of (key, direction) pairs. Raises\nTypeError if index is not an instance of (str, unicode, list).</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">if a custom name was used on index creation (by\npassing the name parameter to create_index() or\nensure_index()) the index <strong>must</strong> be dropped by name.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>index_or_name: index (or name of index) to drop</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\ndrop_indexes()<p>Drops all indexes on this collection.</p>\n<p>Can be used on non-existant collections or collections with no indexes.\nRaises OperationFailure on an error.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\nreindex()<p>Rebuilds all indexes on this collection.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">reindex blocks all other operations (indexes\nare built in the foreground) and will be slow for large\ncollections.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\nlist_indexes()<p>Get a cursor over the index documents for this collection.</p>\n<pre>&gt;&gt;&gt; for index in db.test.list_indexes():\n...     print(index)\n...\nSON([(u'v', 1), (u'key', SON([(u'_id', 1)])),\n     (u'name', u'_id_'), (u'ns', u'test.test')])\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Returns:</th><td>An instance of CommandCursor.</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 3.0.</p>\n\n\nindex_information()<p>Get information on this collection’s indexes.</p>\n<p>Returns a dictionary where the keys are index names (as\nreturned by create_index()) and the values are dictionaries\ncontaining information about each index. The dictionary is\nguaranteed to contain at least a single key, "key" which\nis a list of (key, direction) pairs specifying the index (as\npassed to create_index()). It will also contain any other\nmetadata about the indexes, except for the "ns" and\n"name" keys, which are cleaned. Example output might look\nlike this:</p>\n<pre>&gt;&gt;&gt; db.test.ensure_index("x", unique=True)\nu'x_1'\n&gt;&gt;&gt; db.test.index_information()\n{u'_id_': {u'key': [(u'_id', 1)]},\n u'x_1': {u'unique': True, u'key': [(u'x', 1)]}}\n</pre>\n\n\ndrop()<p>Alias for drop_collection().</p>\n<p>The following two calls are equivalent:</p>\n<pre>&gt;&gt;&gt; db.foo.drop()\n&gt;&gt;&gt; db.drop_collection("foo")\n</pre>\n\n\nrename(<em>new_name</em>, <em>**kwargs</em>)<p>Rename this collection.</p>\n<p>If operating in auth mode, client must be authorized as an\nadmin to perform this operation. Raises TypeError if\nnew_name is not an instance of basestring\n(str in python 3). Raises InvalidName\nif new_name is not a valid collection name.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>new_name: new name for this collection</li>\n<li>**kwargs (optional): additional arguments to the rename command\nmay be passed as keyword arguments to this helper method\n(i.e. dropTarget=True)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\noptions()<p>Get the options set on this collection.</p>\n<p>Returns a dictionary of options and their values - see\ncreate_collection() for more\ninformation on the possible options. Returns an empty\ndictionary if the collection has not been created yet.</p>\n\ngroup(<em>key</em>, <em>condition</em>, <em>initial</em>, <em>reduce</em>, <em>finalize=None</em>, <em>**kwargs</em>)<p>Perform a query similar to an SQL <em>group by</em> operation.</p>\n<p>Returns an array of grouped items.</p>\n<p>The key parameter can be:</p>\n\n<ul>\n<li>None to use the entire document as a key.</li>\n<li>A list of keys (each a basestring\n(str in python 3)) to group by.</li>\n<li>A basestring (str in python 3), or\nCode instance containing a JavaScript\nfunction to be applied to each document, returning the key\nto group by.</li>\n</ul>\n\n<p>The group() method obeys the read_preference of this\nCollection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>key: fields to group by (see above description)</li>\n<li>condition: specification of rows to be\nconsidered (as a find() query specification)</li>\n<li>initial: initial value of the aggregation counter object</li>\n<li>reduce: aggregation function as a JavaScript string</li>\n<li>finalize: function to be called on each object in output list.</li>\n<li>**kwargs (optional): additional arguments to the group command\nmay be passed as keyword arguments to this helper method</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 2.2: Removed deprecated argument: command</p>\n\n\nmap_reduce(<em>map</em>, <em>reduce</em>, <em>out</em>, <em>full_response=False</em>, <em>**kwargs</em>)<p>Perform a map/reduce operation on this collection.</p>\n<p>If full_response is False (default) returns a\nCollection instance containing\nthe results of the operation. Otherwise, returns the full\nresponse from the server to the map reduce command.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><p class="first">map: map function (as a JavaScript string)</p>\n</li>\n<li><p class="first">reduce: reduce function (as a JavaScript string)</p>\n</li>\n<li><p class="first">out: output collection name or out object (dict). See\nthe map reduce command documentation for available options.\nNote: out options are order sensitive. SON\ncan be used to specify multiple options.\ne.g. SON([(‘replace’, &lt;collection name&gt;), (‘db’, &lt;database name&gt;)])</p>\n</li>\n<li><p class="first">full_response (optional): if True, return full response to\nthis command - otherwise just return the result collection</p>\n</li>\n<li><p class="first">**kwargs (optional): additional arguments to the\nmap reduce command may be passed as keyword arguments to this\nhelper method, e.g.:</p>\n<pre>&gt;&gt;&gt; db.test.map_reduce(map, reduce, "myresults", limit=2)\n</pre>\n\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The map_reduce() method does <strong>not</strong> obey the\nread_preference of this Collection. To run\nmapReduce on a secondary use the inline_map_reduce() method\ninstead.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis collection is automatically applied to this operation (if the\noutput is not inline) when using MongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this collection’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last"><em>Aggregation Examples</em></p>\n\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\n<p>Changed in version 2.2: Removed deprecated arguments: merge_output and reduce_output</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>mapreduce</em></p>\n\n\ninline_map_reduce(<em>map</em>, <em>reduce</em>, <em>full_response=False</em>, <em>**kwargs</em>)<p>Perform an inline map/reduce operation on this collection.</p>\n<p>Perform the map/reduce operation on the server in RAM. A result\ncollection is not created. The result set is returned as a list\nof documents.</p>\n<p>If full_response is False (default) returns the\nresult documents in a list. Otherwise, returns the full\nresponse from the server to the map reduce command.</p>\n<p>The inline_map_reduce() method obeys the read_preference\nof this Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><p class="first">map: map function (as a JavaScript string)</p>\n</li>\n<li><p class="first">reduce: reduce function (as a JavaScript string)</p>\n</li>\n<li><p class="first">full_response (optional): if True, return full response to\nthis command - otherwise just return the result collection</p>\n</li>\n<li><p class="first">**kwargs (optional): additional arguments to the\nmap reduce command may be passed as keyword arguments to this\nhelper method, e.g.:</p>\n<pre>&gt;&gt;&gt; db.test.inline_map_reduce(map, reduce, limit=2)\n</pre>\n\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\nparallel_scan(<em>num_cursors</em>, <em>**kwargs</em>)<p>Scan this entire collection in parallel.</p>\n<p>Returns a list of up to num_cursors cursors that can be iterated\nconcurrently. As long as the collection is not modified during\nscanning, each document appears once in one of the cursors result\nsets.</p>\n<p>For example, to process each document in a collection using some\nthread-safe process_document() function:</p>\n<pre>&gt;&gt;&gt; def process_cursor(cursor):\n...     for document in cursor:\n...     # Some thread-safe processing function:\n...     process_document(document)\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get up to 4 cursors.\n...\n&gt;&gt;&gt; cursors = collection.parallel_scan(4)\n&gt;&gt;&gt; threads = [\n...     threading.Thread(target=process_cursor, args=(cursor,))\n...     for cursor in cursors]\n&gt;&gt;&gt;\n&gt;&gt;&gt; for thread in threads:\n...     thread.start()\n&gt;&gt;&gt;\n&gt;&gt;&gt; for thread in threads:\n...     thread.join()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # All documents have now been processed.\n</pre>\n\n<p>The parallel_scan() method obeys the read_preference of\nthis Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>num_cursors: the number of cursors to return</li>\n<li>**kwargs: additional options for the parallelCollectionScan\ncommand can be passed as keyword arguments.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">Requires server version <strong>&gt;= 2.5.5</strong>.</p>\n\n\n<p>Changed in version 3.4: Added back support for arbitrary keyword arguments. MongoDB 3.4\nadds support for maxTimeMS as an option to the\nparallelCollectionScan command.</p>\n\n\n<p>Changed in version 3.0: Removed support for arbitrary keyword arguments, since\nthe parallelCollectionScan command has no optional arguments.</p>\n\n\ninitialize_unordered_bulk_op(<em>bypass_document_validation=False</em>)<p>Initialize an unordered batch of write operations.</p>\n<p>Operations will be performed on the server in arbitrary order,\npossibly in parallel. All operations will be attempted.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Returns a BulkOperationBuilder instance.</p>\n<p>See Unordered Bulk Write Operations for examples.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 2.7.</p>\n\n\ninitialize_ordered_bulk_op(<em>bypass_document_validation=False</em>)<p>Initialize an ordered batch of write operations.</p>\n<p>Operations will be performed on the server serially, in the\norder provided. If an error occurs all remaining operations\nare aborted.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>bypass_document_validation: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Returns a BulkOperationBuilder instance.</p>\n<p>See Ordered Bulk Write Operations for examples.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">bypass_document_validation requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n\n<p>New in version 2.7.</p>\n\n\ninsert(<em>doc_or_docs</em>, <em>manipulate=True</em>, <em>check_keys=True</em>, <em>continue_on_error=False</em>, <em>**kwargs</em>)<p>Insert a document(s) into this collection.</p>\n<p><strong>DEPRECATED</strong> - Use insert_one() or insert_many() instead.</p>\n\n<p>Changed in version 3.0: Removed the safe parameter. Pass w=0 for unacknowledged write\noperations.</p>\n\n\nsave(<em>to_save</em>, <em>manipulate=True</em>, <em>check_keys=True</em>, <em>**kwargs</em>)<p>Save a document in this collection.</p>\n<p><strong>DEPRECATED</strong> - Use insert_one() or replace_one() instead.</p>\n\n<p>Changed in version 3.0: Removed the safe parameter. Pass w=0 for unacknowledged write\noperations.</p>\n\n\nupdate(<em>spec</em>, <em>document</em>, <em>upsert=False</em>, <em>manipulate=False</em>, <em>multi=False</em>, <em>check_keys=True</em>, <em>**kwargs</em>)<p>Update a document(s) in this collection.</p>\n<p><strong>DEPRECATED</strong> - Use replace_one(), update_one(), or\nupdate_many() instead.</p>\n\n<p>Changed in version 3.0: Removed the safe parameter. Pass w=0 for unacknowledged write\noperations.</p>\n\n\nremove(<em>spec_or_id=None</em>, <em>multi=True</em>, <em>**kwargs</em>)<p>Remove a document(s) from this collection.</p>\n<p><strong>DEPRECATED</strong> - Use delete_one() or delete_many() instead.</p>\n\n<p>Changed in version 3.0: Removed the safe parameter. Pass w=0 for unacknowledged write\noperations.</p>\n\n\nfind_and_modify(<em>query={}</em>, <em>update=None</em>, <em>upsert=False</em>, <em>sort=None</em>, <em>full_response=False</em>, <em>manipulate=False</em>, <em>**kwargs</em>)<p>Update and return an object.</p>\n<p><strong>DEPRECATED</strong> - Use find_one_and_delete(),\nfind_one_and_replace(), or find_one_and_update() instead.</p>\n\nensure_index(<em>key_or_list</em>, <em>cache_for=300</em>, <em>**kwargs</em>)<p><strong>DEPRECATED</strong> - Ensures that an index exists on this collection.</p>\n\n<p>Changed in version 3.0: <strong>DEPRECATED</strong></p>\n\n\nfull_name<p>The full name of this Collection.</p>\n<p>The full name is of the form database_name.collection_name.</p>\n\nname<p>The name of this Collection.</p>\n\ndatabase<p>The Database that this\nCollection is a part of.</p>\n\ncodec_options<p>Read only access to the CodecOptions\nof this instance.</p>\n\nread_preference<p>Read only access to the read preference of this instance.</p>\n\n<p>Changed in version 3.0: The read_preference attribute is now read only.</p>\n\n\nwrite_concern<p>Read only access to the WriteConcern\nof this instance.</p>\n\n<p>Changed in version 3.0: The write_concern attribute is now read only.</p>\n\n\nc[name] || c.name<p>Get the name sub-collection of Collection c.</p>\n<p>Raises InvalidName if an invalid\ncollection name is used.</p>\n<p>Get / create a Mongo collection.</p>\n<p>Raises TypeError if <code>name</code> is not an instance of\nbasestring (str in python 3). Raises\nInvalidName if <code>name</code> is not a valid\ncollection name. Any additional keyword arguments will be used\nas options passed to the create command. See\ncreate_collection() for valid\noptions.</p>\n<p>If <code>create</code> is True, <code>collation</code> is specified, or any additional\nkeyword arguments are present, a create command will be\nsent. Otherwise, a create command will not be sent and the\ncollection will be created implicitly on first use.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>database</code>: the database to get a collection from</li>\n<li><code>name</code>: the name of the collection to get</li>\n<li><code>create</code> (optional): if True, force collection\ncreation even without options being set</li>\n<li><code>codec_options</code> (optional): An instance of\nCodecOptions. If None (the\ndefault) database.codec_options is used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\nNone (the default) database.read_preference is used.</li>\n<li><code>write_concern</code> (optional): An instance of\nWriteConcern. If None (the\ndefault) database.write_concern is used.</li>\n<li><code>read_concern</code> (optional): An instance of\nReadConcern. If None (the\ndefault) database.read_concern is used.</li>\n<li><code>collation</code> (optional): An instance of\nCollation. If a collation is provided,\nit will be passed to the create collection command. This option is\nonly supported on MongoDB 3.4 and above.</li>\n<li><code>**kwargs</code> (optional): additional keyword arguments will\nbe passed as options for the create collection command</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Support the <code>collation</code> option.</p>\n\n\n<p>Changed in version 3.2: Added the read_concern option.</p>\n\n\n<p>Changed in version 3.0: Added the codec_options, read_preference, and write_concern options.\nRemoved the uuid_subtype attribute.\nCollection no longer returns an\ninstance of Collection for attribute\nnames with leading underscores. You must use dict-style lookups\ninstead::</p>\n\ncollection[‘__my_collection__’]\n<p>Not:</p>\n\ncollection.__my_collection__\n\n\n<p>Changed in version 2.2: Removed deprecated argument: options</p>\n\n\n<p>New in version 2.1: uuid_subtype attribute</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>collections</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.collection.Collection
pymongo ASCENDING	A										<section class="prog_container"><pre><code>\npymongo.ASCENDING = 1</pre></code><p><p>Ascending sort order.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.ASCENDING
pymongo DESCENDING	A										<section class="prog_container"><pre><code>\npymongo.DESCENDING = -1</pre></code><p><p>Descending sort order.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.DESCENDING
pymongo GEO2D	A										<section class="prog_container"><pre><code>\npymongo.GEO2D = '2d'</pre></code><p><p>Index specifier for a 2-dimensional geospatial index.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.GEO2D
pymongo GEOHAYSTACK	A										<section class="prog_container"><pre><code>\npymongo.GEOHAYSTACK = 'geoHaystack'</pre></code><p><p>Index specifier for a 2-dimensional haystack index.</p>\n\n<p>New in version 2.1.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.GEOHAYSTACK
pymongo GEOSPHERE	A										<section class="prog_container"><pre><code>\npymongo.GEOSPHERE = '2dsphere'</pre></code><p><p>Index specifier for a spherical geospatial index.</p>\n\n<p>New in version 2.5.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">2dsphere indexing requires server version <strong>&gt;= 2.4.0</strong>.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.GEOSPHERE
pymongo HASHED	A										<section class="prog_container"><pre><code>\npymongo.HASHED = 'hashed'</pre></code><p><p>Index specifier for a hashed index.</p>\n\n<p>New in version 2.5.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">hashed indexing requires server version <strong>&gt;= 2.4.0</strong>.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.HASHED
pymongo TEXT	A										<section class="prog_container"><pre><code>\npymongo.TEXT = 'text'</pre></code><p><p>Index specifier for a text index.</p>\n\n<p>New in version 2.7.1.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">text search requires server version <strong>&gt;= 2.4.0</strong>.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/collection.html#pymongo.TEXT
pymongo command_cursor CommandCursor	A										<section class="prog_container"><pre><code>\nclass pymongo.command_cursor.CommandCursor(<em>collection</em>, <em>cursor_info</em>, <em>address</em>, <em>retrieved=0</em>)</pre></code><p>\nbatch_size(<em>batch_size</em>)<p>Limits the number of documents returned in one batch. Each batch\nrequires a round trip to the server. It can be adjusted to optimize\nperformance and limit data transfer.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">batch_size can not override MongoDB’s internal limits on the\namount of data it will return to the client in a single batch (i.e\nif you set batch size to 1,000,000,000, MongoDB will currently only\nreturn 4-16MB of results per batch).</p>\n\n<p>Raises TypeError if batch_size is not an integer.\nRaises ValueError if batch_size is less than 0.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>batch_size: The size of each batch of results requested.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nclose()<p>Explicitly close / kill this cursor. Required for PyPy, Jython and\nother Python implementations that don’t use reference counting\ngarbage collection.</p>\n\nnext()<p>Advance the cursor.</p>\n\naddress<p>The (host, port) of the server used, or None.</p>\n\n<p>New in version 3.0.</p>\n\n\nalive<p>Does this cursor have the potential to return more data?</p>\n<p>Even if alive is True, next() can raise\nStopIteration. Best to use a for loop:</p>\n<pre>for doc in collection.aggregate(pipeline):\n    print(doc)\n</pre>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">alive can be True while iterating a cursor from\na failed server. In this case alive will return False after\nnext() fails to retrieve the next batch of results from the\nserver.</p>\n\n\ncursor_id<p>Returns the id of the cursor.</p>\n<p>Create a new command cursor.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/command_cursor.html#pymongo.command_cursor.CommandCursor
pymongo cursor CursorType	A										<section class="prog_container"><pre><code>\nclass pymongo.cursor.CursorType</pre></code><p>\nNON_TAILABLE<p>The standard cursor type.</p>\n\nTAILABLE<p>The tailable cursor type.</p>\n<p>Tailable cursors are only for use with capped collections. They are not\nclosed when the last data is retrieved but are kept open and the cursor\nlocation marks the final document position. If more data is received\niteration of the cursor will continue from the last document received.</p>\n\nTAILABLE_AWAIT<p>A tailable cursor with the await option set.</p>\n<p>Creates a tailable cursor that will wait for a few seconds after returning\nthe full result set so that it can capture and return additional data added\nduring the query.</p>\n\nEXHAUST<p>An exhaust cursor.</p>\n<p>MongoDB will stream batched results to the client without waiting for the\nclient to request each batch, reducing latency.</p>\n\n\n\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.CursorType
pymongo cursor Cursor	A										<section class="prog_container"><pre><code>\nclass pymongo.cursor.Cursor(<em>collection</em>, <em>filter=None</em>, <em>projection=None</em>, <em>skip=0</em>, <em>limit=0</em>, <em>no_cursor_timeout=False</em>, <em>cursor_type=CursorType.NON_TAILABLE</em>, <em>sort=None</em>, <em>allow_partial_results=False</em>, <em>oplog_replay=False</em>, <em>modifiers=None</em>, <em>manipulate=True</em>)</pre></code><p>\n__getitem__(<em>index</em>)<p>Get a single document or a slice of documents from this cursor.</p>\n<p>Raises InvalidOperation if this\ncursor has already been used.</p>\n<p>To get a single document use an integral index, e.g.:</p>\n<pre>&gt;&gt;&gt; db.test.find()[50]\n</pre>\n\n<p>An IndexError will be raised if the index is negative\nor greater than the amount of documents in this cursor. Any\nlimit previously applied to this cursor will be ignored.</p>\n<p>To get a slice of documents use a slice index, e.g.:</p>\n<pre>&gt;&gt;&gt; db.test.find()[20:25]\n</pre>\n\n<p>This will return this cursor with a limit of 5 and skip of\n20 applied.  Using a slice index will override any prior\nlimits or skips applied to this cursor (including those\napplied through previous calls to this method). Raises\nIndexError when the slice has a step, a negative\nstart value, or a stop value less than or equal to the start\nvalue.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>index: An integer or slice index to be applied to this cursor</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nadd_option(<em>mask</em>)<p>Set arbitrary query flags using a bitmask.</p>\n<p>To set the tailable flag:\ncursor.add_option(2)</p>\n\nbatch_size(<em>batch_size</em>)<p>Limits the number of documents returned in one batch. Each batch\nrequires a round trip to the server. It can be adjusted to optimize\nperformance and limit data transfer.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">batch_size can not override MongoDB’s internal limits on the\namount of data it will return to the client in a single batch (i.e\nif you set batch size to 1,000,000,000, MongoDB will currently only\nreturn 4-16MB of results per batch).</p>\n\n<p>Raises TypeError if batch_size is not an integer.\nRaises ValueError if batch_size is less than 0.\nRaises InvalidOperation if this\nCursor has already been used. The last batch_size\napplied to this cursor takes precedence.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>batch_size: The size of each batch of results requested.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nclone()<p>Get a clone of this cursor.</p>\n<p>Returns a new Cursor instance with options matching those that have\nbeen set on the current instance. The clone will be completely\nunevaluated, even if the current instance has been partially or\ncompletely evaluated.</p>\n\nclose()<p>Explicitly close / kill this cursor. Required for PyPy, Jython and\nother Python implementations that don’t use reference counting\ngarbage collection.</p>\n\ncollation(<em>collation</em>)<p>Adds a Collation to this query.</p>\n<p>This option is only supported on MongoDB 3.4 and above.</p>\n<p>Raises TypeError if collation is not an instance of\nCollation or a dict. Raises\nInvalidOperation if this Cursor has\nalready been used. Only the last collation applied to this cursor has\nany effect.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>collation: An instance of Collation.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ncomment(<em>comment</em>)<p>Adds a ‘comment’ to the cursor.</p>\n<p>http://docs.mongodb.org/manual/reference/operator/comment/</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>comment: A string or document</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 2.7.</p>\n\n\ncount(<em>with_limit_and_skip=False</em>)<p>Get the size of the results set for this query.</p>\n<p>Returns the number of documents in the results set for this query. Does\nnot take limit() and skip() into account by default - set\nwith_limit_and_skip to True if that is the desired behavior.\nRaises OperationFailure on a database error.</p>\n<p>When used with MongoDB &gt;= 2.6, count() uses any hint()\napplied to the query. In the following example the hint is passed to\nthe count command:</p>\n\ncollection.find({‘field’: ‘value’}).hint(‘field_1’).count()\n<p>The count() method obeys the\nread_preference of the\nCollection instance on which\nfind() was called.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>with_limit_and_skip (optional): take any limit() or\nskip() that has been applied to this cursor into account when\ngetting the count</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The with_limit_and_skip parameter requires server\nversion <strong>&gt;= 1.1.4-</strong></p>\n\n\n<p>Changed in version 2.8: The count() method now supports hint().</p>\n\n\ndistinct(<em>key</em>)<p>Get a list of distinct values for key among all documents\nin the result set of this query.</p>\n<p>Raises TypeError if key is not an instance of\nbasestring (str in python 3).</p>\n<p>The distinct() method obeys the\nread_preference of the\nCollection instance on which\nfind() was called.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>key: name of key for which we want to get the distinct values</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="last">pymongo.collection.Collection.distinct()</p>\n\n\nexplain()<p>Returns an explain plan record for this cursor.</p>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>explain</em></p>\n\n\nhint(<em>index</em>)<p>Adds a ‘hint’, telling Mongo the proper index to use for the query.</p>\n<p>Judicious use of hints can greatly improve query\nperformance. When doing a query on multiple fields (at least\none of which is indexed) pass the indexed field as a hint to\nthe query. Hinting will not do anything if the corresponding\nindex does not exist. Raises\nInvalidOperation if this cursor has\nalready been used.</p>\n<p>index should be an index as passed to\ncreate_index()\n(e.g. [('field', ASCENDING)]) or the name of the index.\nIf index is None any existing hint for this query is\ncleared. The last hint applied to this cursor takes precedence\nover all others.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>index: index to hint on (as an index specifier)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 2.8: The hint() method accepts the name of the index.</p>\n\n\nlimit(<em>limit</em>)<p>Limits the number of results to be returned by this cursor.</p>\n<p>Raises TypeError if limit is not an integer. Raises\nInvalidOperation if this Cursor\nhas already been used. The last limit applied to this cursor\ntakes precedence. A limit of 0 is equivalent to no limit.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>limit: the number of results to return</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>limit</em></p>\n\n\nmax(<em>spec</em>)<p>Adds max operator that specifies upper bound for specific index.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>spec: a list of field, limit pairs specifying the exclusive\nupper bound for all keys of a specific index in order.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 2.7.</p>\n\n\nmax_await_time_ms(<em>max_await_time_ms</em>)<p>Specifies a time limit for a getMore operation on a\nTAILABLE_AWAIT cursor. For all other\ntypes of cursor max_await_time_ms is ignored.</p>\n<p>Raises TypeError if max_await_time_ms is not an integer or\nNone. Raises InvalidOperation if this\nCursor has already been used.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">max_await_time_ms requires server version <strong>&gt;= 3.2</strong></p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>max_await_time_ms: the time limit after which the operation is\naborted</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 3.2.</p>\n\n\nmax_scan(<em>max_scan</em>)<p>Limit the number of documents to scan when performing the query.</p>\n<p>Raises InvalidOperation if this\ncursor has already been used. Only the last max_scan()\napplied to this cursor has any effect.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>max_scan: the maximum number of documents to scan</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nmax_time_ms(<em>max_time_ms</em>)<p>Specifies a time limit for a query operation. If the specified\ntime is exceeded, the operation will be aborted and\nExecutionTimeout is raised. If max_time_ms\nis None no limit is applied.</p>\n<p>Raises TypeError if max_time_ms is not an integer or None.\nRaises InvalidOperation if this Cursor\nhas already been used.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>max_time_ms: the time limit after which the operation is aborted</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nmin(<em>spec</em>)<p>Adds min operator that specifies lower bound for specific index.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>spec: a list of field, limit pairs specifying the inclusive\nlower bound for all keys of a specific index in order.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 2.7.</p>\n\n\nnext()<p>Advance the cursor.</p>\n\nremove_option(<em>mask</em>)<p>Unset arbitrary query flags using a bitmask.</p>\n<p>To unset the tailable flag:\ncursor.remove_option(2)</p>\n\nrewind()<p>Rewind this cursor to its unevaluated state.</p>\n<p>Reset this cursor if it has been partially or completely evaluated.\nAny options that are present on the cursor will remain in effect.\nFuture iterating performed on this cursor will cause new queries to\nbe sent to the server, even if the resultant data has already been\nretrieved by this cursor.</p>\n\nskip(<em>skip</em>)<p>Skips the first skip results of this cursor.</p>\n<p>Raises TypeError if skip is not an integer. Raises\nValueError if skip is less than 0. Raises\nInvalidOperation if this Cursor has\nalready been used. The last skip applied to this cursor takes\nprecedence.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>skip: the number of results to skip</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nsort(<em>key_or_list</em>, <em>direction=None</em>)<p>Sorts this cursor’s results.</p>\n<p>Pass a field name and a direction, either\nASCENDING or DESCENDING:</p>\n<pre>for doc in collection.find().sort('field', pymongo.ASCENDING):\n    print(doc)\n</pre>\n\n<p>To sort by multiple fields, pass a list of (key, direction) pairs:</p>\n<pre>for doc in collection.find().sort([\n        ('field1', pymongo.ASCENDING),\n        ('field2', pymongo.DESCENDING)]):\n    print(doc)\n</pre>\n\n<p>Beginning with MongoDB version 2.6, text search results can be\nsorted by relevance:</p>\n<pre>cursor = db.test.find(\n    {'$text': {'$search': 'some words'}},\n    {'score': {'$meta': 'textScore'}})\n\n# Sort by 'score' field.\ncursor.sort([('score', {'$meta': 'textScore'})])\n\nfor doc in cursor:\n    print(doc)\n</pre>\n\n<p>Raises InvalidOperation if this cursor has\nalready been used. Only the last sort() applied to this\ncursor has any effect.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>key_or_list: a single key or a list of (key, direction)\npairs specifying the keys to sort on</li>\n<li>direction (optional): only used if key_or_list is a single\nkey, if not given ASCENDING is assumed</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nwhere(<em>code</em>)<p>Adds a $where clause to this query.</p>\n<p>The code argument must be an instance of basestring\n(str in python 3) or Code\ncontaining a JavaScript expression. This expression will be\nevaluated for each document scanned. Only those documents\nfor which the expression evaluates to <em>true</em> will be returned\nas results. The keyword <em>this</em> refers to the object currently\nbeing scanned.</p>\n<p>Raises TypeError if code is not an instance of\nbasestring (str in python 3). Raises\nInvalidOperation if this\nCursor has already been used. Only the last call to\nwhere() applied to a Cursor has any effect.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>code: JavaScript expression to use as a filter</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\naddress<p>The (host, port) of the server used, or None.</p>\n\n<p>Changed in version 3.0: Renamed from “conn_id”.</p>\n\n\nalive<p>Does this cursor have the potential to return more data?</p>\n<p>This is mostly useful with tailable cursors\nsince they will stop iterating even though they <em>may</em> return more\nresults in the future.</p>\n<p>With regular cursors, simply use a for loop instead of alive:</p>\n<pre>for doc in collection.find():\n    print(doc)\n</pre>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">Even if alive is True, next() can raise\nStopIteration. alive can also be True while iterating\na cursor from a failed server. In this case alive will\nreturn False after next() fails to retrieve the next batch\nof results from the server.</p>\n\n\ncollection<p>The Collection that this\nCursor is iterating.</p>\n\ncursor_id<p>Returns the id of the cursor</p>\n<p>Useful if you need to manage cursor ids and want to handle killing\ncursors manually using\nkill_cursors()</p>\n\n<p>New in version 2.2.</p>\n\n\nretrieved<p>The number of documents retrieved so far.</p>\n\nc[index]<p>See __getitem__().</p>\n<p>Create a new cursor.</p>\n<p>Should not be called directly by application developers - see\nfind() instead.</p>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>cursors</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor.html#pymongo.cursor.Cursor
pymongo bulk BulkOperationBuilder	A										<section class="prog_container"><pre><code>\nclass pymongo.bulk.BulkOperationBuilder(<em>collection</em>, <em>ordered=True</em>, <em>bypass_document_validation=False</em>)</pre></code><p>\nexecute(<em>write_concern=None</em>)<p>Execute all provided operations.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>write_concern (optional): the write concern for this bulk\nexecution.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nfind(<em>selector</em>, <em>collation=None</em>)<p>Specify selection criteria for bulk operations.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>selector (dict): the selection criteria for update\nand remove operations.</li>\n<li>collation (optional): An instance of\nCollation. This option is only supported\non MongoDB 3.4 and above.</li>\n</ul>\n</td>\n</tr>\n<tr><th>Returns:</th><td><ul>\n<li>A BulkWriteOperation instance, used to add\nupdate and remove operations to this bulk operation.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.4: Added the collation option.</p>\n\n\ninsert(<em>document</em>)<p>Insert a single document.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>document (dict): the document to insert</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="last">Why does PyMongo add an _id field to all of my documents?</p>\n\n<p>Initialize a new BulkOperationBuilder instance.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>collection</code>: A Collection instance.</li>\n<li><code>ordered</code> (optional): If True all operations will be executed\nserially, in the order provided, and the entire execution will\nabort on the first error. If False operations will be executed\nin arbitrary order (possibly in parallel on the server), reporting\nany errors that occurred after attempting all operations. Defaults\nto True.</li>\n<li><code>bypass_document_validation</code>: (optional) If True, allows the\nwrite to opt-out of document level validation. Default is\nFalse.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last"><code>bypass_document_validation</code> requires server version\n<strong>&gt;= 3.2</strong></p>\n\n\n<p>Changed in version 3.2: Added bypass_document_validation support</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkOperationBuilder
pymongo bulk BulkUpsertOperation	A										<section class="prog_container"><pre><code>\nclass pymongo.bulk.BulkUpsertOperation(<em>selector</em>, <em>bulk</em>, <em>collation</em>)</pre></code><p>\nreplace_one(<em>replacement</em>)<p>Replace one entire document matching the selector criteria.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>replacement (dict): the replacement document</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupdate(<em>update</em>)<p>Update all documents matching the selector.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>update (dict): the update operations to apply</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupdate_one(<em>update</em>)<p>Update one document matching the selector.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>update (dict): the update operations to apply</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>An interface for adding upsert operations.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkUpsertOperation
pymongo bulk BulkWriteOperation	A										<section class="prog_container"><pre><code>\nclass pymongo.bulk.BulkWriteOperation(<em>selector</em>, <em>bulk</em>, <em>collation</em>)</pre></code><p>\nremove()<p>Remove all documents matching the selector criteria.</p>\n\nremove_one()<p>Remove a single document matching the selector criteria.</p>\n\nreplace_one(<em>replacement</em>)<p>Replace one entire document matching the selector criteria.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>replacement (dict): the replacement document</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupdate(<em>update</em>)<p>Update all documents matching the selector criteria.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>update (dict): the update operations to apply</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupdate_one(<em>update</em>)<p>Update one document matching the selector criteria.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>update (dict): the update operations to apply</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupsert()<p>Specify that all chained update operations should be\nupserts.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Returns:</th><td><ul>\n<li>A BulkUpsertOperation instance, used to add\nupdate operations to this bulk operation.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>An interface for adding update or remove operations.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/bulk.html#pymongo.bulk.BulkWriteOperation
pymongo errors OperationFailure code	A										<section class="prog_container"><pre><code>\ncode</pre></code><p><p>The error code returned by the server, if any.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.OperationFailure.code
pymongo errors OperationFailure details	A										<section class="prog_container"><pre><code>\ndetails</pre></code><p><p>The complete error document returned by the server.</p>\n<p>Depending on the error that occurred, the error document\nmay include useful information beyond just the error\nmessage. When connected to a mongos the error document\nmay contain one or more subdocuments if errors occurred\non multiple shards.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.OperationFailure.details
pymongo errors AutoReconnect	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.AutoReconnect(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>Raised when a connection to the database is lost and an attempt to\nauto-reconnect will be made.</p>\n<p>In order to auto-reconnect you must handle this exception, recognizing that\nthe operation which caused it has not necessarily succeeded. Future\noperations will attempt to open a new connection to the database (and\nwill continue to raise this exception until the first successful\nconnection is made).</p>\n<p>Subclass of ConnectionFailure.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.AutoReconnect
pymongo errors BulkWriteError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.BulkWriteError(<em>results</em>)</pre></code><p><p>Exception class for bulk write errors.</p>\n\n<p>New in version 2.7.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.BulkWriteError
pymongo errors CollectionInvalid	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.CollectionInvalid</pre></code><p><p>Raised when collection validation fails.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.CollectionInvalid
pymongo errors ConfigurationError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.ConfigurationError</pre></code><p><p>Raised when something is incorrectly configured.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ConfigurationError
pymongo errors ConnectionFailure	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.ConnectionFailure</pre></code><p><p>Raised when a connection to the database cannot be made or is lost.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ConnectionFailure
pymongo errors CursorNotFound	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.CursorNotFound(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised while iterating query results if the cursor is\ninvalidated on the server.</p>\n\n<p>New in version 2.7.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.CursorNotFound
pymongo errors DocumentTooLarge	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.DocumentTooLarge</pre></code><p><p>Raised when an encoded document is too large for the connected server.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.DocumentTooLarge
pymongo errors DuplicateKeyError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.DuplicateKeyError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when an insert or update fails due to a duplicate key error.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.DuplicateKeyError
pymongo errors ExceededMaxWaiters	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.ExceededMaxWaiters</pre></code><p><p>Raised when a thread tries to get a connection from a pool and\nmaxPoolSize * waitQueueMultiple threads are already waiting.</p>\n\n<p>New in version 2.6.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ExceededMaxWaiters
pymongo errors ExecutionTimeout	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.ExecutionTimeout(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when a database operation times out, exceeding the $maxTimeMS\nset in the query or command option.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">Requires server version <strong>&gt;= 2.6.0</strong></p>\n\n\n<p>New in version 2.7.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ExecutionTimeout
pymongo errors InvalidName	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.InvalidName</pre></code><p><p>Raised when an invalid name is used.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.InvalidName
pymongo errors InvalidOperation	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.InvalidOperation</pre></code><p><p>Raised when a client attempts to perform an invalid operation.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.InvalidOperation
pymongo errors InvalidURI	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.InvalidURI</pre></code><p><p>Raised when trying to parse an invalid mongodb URI.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.InvalidURI
pymongo errors NetworkTimeout	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.NetworkTimeout(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>An operation on an open connection exceeded socketTimeoutMS.</p>\n<p>The remaining connections in the pool stay open. In the case of a write\noperation, you cannot know whether it succeeded or failed.</p>\n<p>Subclass of AutoReconnect.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.NetworkTimeout
pymongo errors NotMasterError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.NotMasterError(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>The server responded “not master” or “node is recovering”.</p>\n<p>These errors result from a query, write, or command. The operation failed\nbecause the client thought it was using the primary but the primary has\nstepped down, or the client thought it was using a healthy secondary but\nthe secondary is stale and trying to recover.</p>\n<p>The client launches a refresh operation on a background thread, to update\nits view of the server as soon as possible after throwing this exception.</p>\n<p>Subclass of AutoReconnect.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.NotMasterError
pymongo errors OperationFailure	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.OperationFailure(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when a database operation fails.</p>\n\n<p>New in version 2.7: The details attribute.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.OperationFailure
pymongo errors ProtocolError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.ProtocolError</pre></code><p><p>Raised for failures related to the wire protocol.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ProtocolError
pymongo errors PyMongoError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.PyMongoError</pre></code><p><p>Base class for all PyMongo exceptions.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.PyMongoError
pymongo errors ServerSelectionTimeoutError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.ServerSelectionTimeoutError(<em>message=''</em>, <em>errors=None</em>)</pre></code><p><p>Thrown when no MongoDB server is available for an operation</p>\n<p>If there is no suitable server for an operation PyMongo tries for\nserverSelectionTimeoutMS (default 30 seconds) to find one, then\nthrows this exception. For example, it is thrown after attempting an\noperation when PyMongo cannot connect to any server, or if you attempt\nan insert into a replica set that has no primary and does not elect one\nwithin the timeout window, or if you attempt to query with a Read\nPreference that the replica set cannot satisfy.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.ServerSelectionTimeoutError
pymongo errors WTimeoutError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.WTimeoutError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Raised when a database operation times out (i.e. wtimeout expires)\nbefore replication completes.</p>\n<p>With newer versions of MongoDB the <code>details</code> attribute may include\nwrite concern fields like ‘n’, ‘updatedExisting’, or ‘writtenTo’.</p>\n\n<p>New in version 2.7.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.WTimeoutError
pymongo errors WriteConcernError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.WriteConcernError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Base exception type for errors raised due to write concern.</p>\n\n<p>New in version 3.0.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.WriteConcernError
pymongo errors WriteError	A										<section class="prog_container"><pre><code>\nexception pymongo.errors.WriteError(<em>error</em>, <em>code=None</em>, <em>details=None</em>)</pre></code><p><p>Base exception type for errors raised during write operations.</p>\n\n<p>New in version 3.0.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/errors.html#pymongo.errors.WriteError
pymongo message delete	A										<section class="prog_container"><pre><code>\npymongo.message.delete(<em>collection_name</em>, <em>spec</em>, <em>safe</em>, <em>last_error_args</em>, <em>opts</em>, <em>flags=0</em>)</pre></code><p><p>Get a <strong>delete</strong> message.</p>\n<p><code>opts</code> is a CodecOptions. <code>flags</code> is a bit vector that may contain\nthe SingleRemove flag or not:</p>\n<p>http://docs.mongodb.org/meta-driver/latest/legacy/mongodb-wire-protocol/#op-delete</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.delete
pymongo message get_more	A										<section class="prog_container"><pre><code>\npymongo.message.get_more(<em>collection_name</em>, <em>num_to_return</em>, <em>cursor_id</em>)</pre></code><p><p>Get a <strong>getMore</strong> message.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.get_more
pymongo message insert	A										<section class="prog_container"><pre><code>\npymongo.message.insert(<em>collection_name</em>, <em>docs</em>, <em>check_keys</em>, <em>safe</em>, <em>last_error_args</em>, <em>continue_on_error</em>, <em>opts</em>)</pre></code><p><p>Get an <strong>insert</strong> message.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.insert
pymongo message kill_cursors	A										<section class="prog_container"><pre><code>\npymongo.message.kill_cursors(<em>cursor_ids</em>)</pre></code><p><p>Get a <strong>killCursors</strong> message.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.kill_cursors
pymongo message query	A										<section class="prog_container"><pre><code>\npymongo.message.query(<em>options</em>, <em>collection_name</em>, <em>num_to_skip</em>, <em>num_to_return</em>, <em>query</em>, <em>field_selector</em>, <em>opts</em>, <em>check_keys=False</em>)</pre></code><p><p>Get a <strong>query</strong> message.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.query
pymongo message update	A										<section class="prog_container"><pre><code>\npymongo.message.update(<em>collection_name</em>, <em>upsert</em>, <em>multi</em>, <em>spec</em>, <em>doc</em>, <em>safe</em>, <em>last_error_args</em>, <em>check_keys</em>, <em>opts</em>)</pre></code><p><p>Get an <strong>update</strong> message.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/message.html#pymongo.message.update
pymongo monitoring CommandListener	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.CommandListener</pre></code><p>\nfailed(<em>event</em>)<p>Abstract method to handle a CommandFailedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of CommandFailedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nstarted(<em>event</em>)<p>Abstract method to handle a CommandStartedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of CommandStartedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nsucceeded(<em>event</em>)<p>Abstract method to handle a CommandSucceededEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of CommandSucceededEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Abstract base class for command listeners.\nHandles <code>CommandStartedEvent</code>, <code>CommandSucceededEvent</code>,\nand <code>CommandFailedEvent</code>.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandListener
pymongo monitoring ServerListener	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerListener</pre></code><p>\nclosed(<em>event</em>)<p>Abstract method to handle a ServerClosedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of ServerClosedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ndescription_changed(<em>event</em>)<p>Abstract method to handle a ServerDescriptionChangedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of ServerDescriptionChangedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nopened(<em>event</em>)<p>Abstract method to handle a ServerOpeningEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of ServerOpeningEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Abstract base class for server listeners.\nHandles <code>ServerOpeningEvent</code>, <code>ServerDescriptionChangedEvent</code>, and\n<code>ServerClosedEvent</code>.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerListener
pymongo monitoring ServerHeartbeatListener	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerHeartbeatListener</pre></code><p>\nfailed(<em>event</em>)<p>Abstract method to handle a ServerHeartbeatFailedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of ServerHeartbeatFailedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nstarted(<em>event</em>)<p>Abstract method to handle a ServerHeartbeatStartedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of ServerHeartbeatStartedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nsucceeded(<em>event</em>)<p>Abstract method to handle a ServerHeartbeatSucceededEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of ServerHeartbeatSucceededEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Abstract base class for server heartbeat listeners.\nHandles <code>ServerHeartbeatStartedEvent</code>, <code>ServerHeartbeatSucceededEvent</code>,\nand <code>ServerHeartbeatFailedEvent</code>.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatListener
pymongo monitoring TopologyListener	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.TopologyListener</pre></code><p>\nclosed(<em>event</em>)<p>Abstract method to handle a TopologyClosedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of TopologyClosedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ndescription_changed(<em>event</em>)<p>Abstract method to handle a TopologyDescriptionChangedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of TopologyDescriptionChangedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nopened(<em>event</em>)<p>Abstract method to handle a TopologyOpenedEvent.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>event: An instance of TopologyOpenedEvent.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Abstract base class for topology monitoring listeners.\nHandles <code>TopologyOpenedEvent</code>, <code>TopologyDescriptionChangedEvent</code>, and\n<code>TopologyClosedEvent</code>.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyListener
pymongo monitoring CommandStartedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.CommandStartedEvent(<em>command</em>, <em>database_name</em>, <em>*args</em>)</pre></code><p>\ncommand<p>The command document.</p>\n\ncommand_name<p>The command name.</p>\n\nconnection_id<p>The address (host, port) of the server this command was sent to.</p>\n\ndatabase_name<p>The name of the database this command was run against.</p>\n\noperation_id<p>An id for this series of events or None.</p>\n\nrequest_id<p>The request id for this operation.</p>\n<p>Event published when a command starts.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>command</code>: The command document.</li>\n<li><code>database_name</code>: The name of the database this command was run against.</li>\n<li><code>request_id</code>: The request id for this operation.</li>\n<li><code>connection_id</code>: The address (host, port) of the server this command\nwas sent to.</li>\n<li><code>operation_id</code>: An optional identifier for a series of related events.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandStartedEvent
pymongo monitoring CommandSucceededEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.CommandSucceededEvent(<em>duration</em>, <em>reply</em>, <em>command_name</em>, <em>request_id</em>, <em>connection_id</em>, <em>operation_id</em>)</pre></code><p>\ncommand_name<p>The command name.</p>\n\nconnection_id<p>The address (host, port) of the server this command was sent to.</p>\n\nduration_micros<p>The duration of this operation in microseconds.</p>\n\noperation_id<p>An id for this series of events or None.</p>\n\nreply<p>The server failure document for this operation.</p>\n\nrequest_id<p>The request id for this operation.</p>\n<p>Event published when a command succeeds.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>duration</code>: The command duration as a datetime.timedelta.</li>\n<li><code>reply</code>: The server reply document.</li>\n<li><code>command_name</code>: The command name.</li>\n<li><code>request_id</code>: The request id for this operation.</li>\n<li><code>connection_id</code>: The address (host, port) of the server this command\nwas sent to.</li>\n<li><code>operation_id</code>: An optional identifier for a series of related events.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandSucceededEvent
pymongo monitoring CommandFailedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.CommandFailedEvent(<em>duration</em>, <em>failure</em>, <em>*args</em>)</pre></code><p>\ncommand_name<p>The command name.</p>\n\nconnection_id<p>The address (host, port) of the server this command was sent to.</p>\n\nduration_micros<p>The duration of this operation in microseconds.</p>\n\nfailure<p>The server failure document for this operation.</p>\n\noperation_id<p>An id for this series of events or None.</p>\n\nrequest_id<p>The request id for this operation.</p>\n<p>Event published when a command fails.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>duration</code>: The command duration as a datetime.timedelta.</li>\n<li><code>failure</code>: The server reply document.</li>\n<li><code>command_name</code>: The command name.</li>\n<li><code>request_id</code>: The request id for this operation.</li>\n<li><code>connection_id</code>: The address (host, port) of the server this command\nwas sent to.</li>\n<li><code>operation_id</code>: An optional identifier for a series of related events.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.CommandFailedEvent
pymongo monitoring ServerDescriptionChangedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerDescriptionChangedEvent(<em>previous_description</em>, <em>new_description</em>, <em>*args</em>)</pre></code><p>\nnew_description<p>The new\nServerDescription.</p>\n\nprevious_description<p>The previous\nServerDescription.</p>\n\nserver_address<p>The address (host/port pair) of the server</p>\n\ntopology_id<p>A unique identifier for the topology this server is a part of.</p>\n<p>Published when server description changes.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerDescriptionChangedEvent
pymongo monitoring ServerOpeningEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerOpeningEvent(<em>server_address</em>, <em>topology_id</em>)</pre></code><p>\nserver_address<p>The address (host/port pair) of the server</p>\n\ntopology_id<p>A unique identifier for the topology this server is a part of.</p>\n<p>Published when server is initialized.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerOpeningEvent
pymongo monitoring ServerClosedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerClosedEvent(<em>server_address</em>, <em>topology_id</em>)</pre></code><p>\nserver_address<p>The address (host/port pair) of the server</p>\n\ntopology_id<p>A unique identifier for the topology this server is a part of.</p>\n<p>Published when server is closed.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerClosedEvent
pymongo monitoring TopologyDescriptionChangedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.TopologyDescriptionChangedEvent(<em>previous_description</em>, <em>new_description</em>, <em>*args</em>)</pre></code><p>\nnew_description<p>The new\nTopologyDescription.</p>\n\nprevious_description<p>The previous\nTopologyDescription.</p>\n\ntopology_id<p>A unique identifier for the topology this server is a part of.</p>\n<p>Published when the topology description changes.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyDescriptionChangedEvent
pymongo monitoring TopologyOpenedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.TopologyOpenedEvent(<em>topology_id</em>)</pre></code><p>\ntopology_id<p>A unique identifier for the topology this server is a part of.</p>\n<p>Published when the topology is initialized.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyOpenedEvent
pymongo monitoring TopologyClosedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.TopologyClosedEvent(<em>topology_id</em>)</pre></code><p>\ntopology_id<p>A unique identifier for the topology this server is a part of.</p>\n<p>Published when the topology is closed.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.TopologyClosedEvent
pymongo monitoring ServerHeartbeatStartedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerHeartbeatStartedEvent(<em>connection_id</em>)</pre></code><p>\nconnection_id<p>The address (host, port) of the server this heartbeat was sent\nto.</p>\n<p>Published when a heartbeat is started.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatStartedEvent
pymongo monitoring ServerHeartbeatSucceededEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerHeartbeatSucceededEvent(<em>duration</em>, <em>reply</em>, <em>*args</em>)</pre></code><p>\nconnection_id<p>The address (host, port) of the server this heartbeat was sent\nto.</p>\n\nduration<p>The duration of this heartbeat in microseconds.</p>\n\nreply<p>An instance of IsMaster.</p>\n<p>Fired when the server heartbeat succeeds.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatSucceededEvent
pymongo monitoring ServerHeartbeatFailedEvent	A										<section class="prog_container"><pre><code>\nclass pymongo.monitoring.ServerHeartbeatFailedEvent(<em>duration</em>, <em>reply</em>, <em>*args</em>)</pre></code><p>\nconnection_id<p>The address (host, port) of the server this heartbeat was sent\nto.</p>\n\nduration<p>The duration of this heartbeat in microseconds.</p>\n\nreply<p>A subclass of Exception.</p>\n<p>Fired when the server heartbeat fails, either with an “ok: 0”\nor a socket exception.</p>\n\n<p>New in version 3.3.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.ServerHeartbeatFailedEvent
pymongo monitoring register	A										<section class="prog_container"><pre><code>\npymongo.monitoring.register(<em>listener</em>)</pre></code><p><p>Register a global event listener.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>listener</code>: A subclasses of CommandListener,\nServerHeartbeatListener, ServerListener, or\nTopologyListener.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/monitoring.html#pymongo.monitoring.register
pymongo mongo_client MongoClient	A										<section class="prog_container"><pre><code>\nclass pymongo.mongo_client.MongoClient(<em>host='localhost'</em>, <em>port=27017</em>, <em>document_class=dict</em>, <em>tz_aware=False</em>, <em>connect=True</em>, <em>**kwargs</em>)</pre></code><p>\nclose()<p>Disconnect from MongoDB.</p>\n<p>Close all sockets in the connection pools and stop the monitor threads.\nIf this instance is used again it will be automatically re-opened and\nthe threads restarted.</p>\n\ndatabase_names()<p>Get a list of the names of all databases on the connected server.</p>\n\ndrop_database(<em>name_or_database</em>)<p>Drop a database.</p>\n<p>Raises TypeError if name_or_database is not an instance of\nbasestring (str in python 3) or\nDatabase.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name_or_database: the name of a database to drop, or a\nDatabase instance representing the\ndatabase to drop</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis client is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this client’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\nget_default_database()<p>Get the database named in the MongoDB connection URI.</p>\n<pre>&gt;&gt;&gt; uri = 'mongodb://host/my_database'\n&gt;&gt;&gt; client = MongoClient(uri)\n&gt;&gt;&gt; db = client.get_default_database()\n&gt;&gt;&gt; assert db.name == 'my_database'\n</pre>\n\n<p>Useful in scripts where you want to choose which database to use\nbased only on the URI in a configuration file.</p>\n\nget_database(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)<p>Get a Database with the given name and\noptions.</p>\n<p>Useful for creating a Database with\ndifferent codec options, read preference, and/or write concern from\nthis MongoClient.</p>\n<pre>&gt;&gt;&gt; client.read_preference\nPrimary()\n&gt;&gt;&gt; db1 = client.test\n&gt;&gt;&gt; db1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; db2 = client.get_database(\n...     'test', read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; db2.read_preference\nSecondary(tag_sets=None)\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: The name of the database - a string.</li>\n<li>codec_options (optional): An instance of\nCodecOptions. If None (the\ndefault) the codec_options of this MongoClient is\nused.</li>\n<li>read_preference (optional): The read preference to use. If\nNone (the default) the read_preference of this\nMongoClient is used. See read_preferences\nfor options.</li>\n<li>write_concern (optional): An instance of\nWriteConcern. If None (the\ndefault) the write_concern of this MongoClient is\nused.</li>\n<li>read_concern (optional): An instance of\nReadConcern. If None (the\ndefault) the read_concern of this MongoClient is\nused.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nserver_info()<p>Get information about the MongoDB server we’re connected to.</p>\n\nclose_cursor(<em>cursor_id</em>, <em>address=None</em>)<p>Send a kill cursors message soon with the given id.</p>\n<p>Raises TypeError if cursor_id is not an instance of\n(int, long). What closing the cursor actually means\ndepends on this client’s cursor manager.</p>\n<p>This method may be called from a Cursor\ndestructor during garbage collection, so it isn’t safe to take a\nlock or do network I/O. Instead, we schedule the cursor to be closed\nsoon on a background thread.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>cursor_id: id of cursor to close</li>\n<li>address (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Added address parameter.</p>\n\n\nkill_cursors(<em>cursor_ids</em>, <em>address=None</em>)<p>DEPRECATED - Send a kill cursors message soon with the given ids.</p>\n<p>Raises TypeError if cursor_ids is not an instance of\nlist.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>cursor_ids: list of cursor ids to kill</li>\n<li>address (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.3: Deprecated.</p>\n\n\n<p>Changed in version 3.0: Now accepts an address argument. Schedules the cursors to be\nclosed on a background thread instead of sending the message\nimmediately.</p>\n\n\nset_cursor_manager(<em>manager_class</em>)<p>DEPRECATED - Set this client’s cursor manager.</p>\n<p>Raises TypeError if manager_class is not a subclass of\nCursorManager. A cursor manager\nhandles closing cursors. Different managers can implement different\npolicies in terms of when to actually kill a cursor that has\nbeen closed.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>manager_class: cursor manager to use</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.3: Deprecated, for real this time.</p>\n\n\n<p>Changed in version 3.0: Undeprecated.</p>\n\n\nfsync(<em>**kwargs</em>)<p>Flush all pending writes to datafiles.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><p class="first">Optional parameters can be passed as keyword arguments:</p>\n<ul>\n<li>lock: If True lock the server to disallow writes.</li>\n<li>async: If True don’t block while synchronizing.</li>\n</ul>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">async and lock can not be used together.</p>\n\n\n<p class="first admonition-title">Warning</p>\n<p class="last">MongoDB does not support the async option\non Windows and will raise an exception on that\nplatform.</p>\n\n</td>\n</tr>\n</tbody>\n</table>\n\nunlock()<p>Unlock a previously locked server.</p>\n\naddress<p>(host, port) of the current standalone, primary, or mongos, or None.</p>\n<p>Accessing address raises InvalidOperation if\nthe client is load-balancing among mongoses, since there is no single\naddress. Use nodes instead.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p>\n\n<p>New in version 3.0.</p>\n\n\nis_primary<p>If this client is connected to a server that can accept writes.</p>\n<p>True if the current server is a standalone, mongos, or the primary of\na replica set. If the client is not connected, this will block until a\nconnection is established or raise ServerSelectionTimeoutError if no\nserver is available.</p>\n\nis_mongos<p>If this client is connected to mongos. If the client is not\nconnected, this will block until a connection is established or raise\nServerSelectionTimeoutError if no server is available..</p>\n\nmax_pool_size<p>The maximum allowable number of concurrent connections to each\nconnected server. Requests to a server will block if there are\nmaxPoolSize outstanding connections to the requested server.\nDefaults to 100. Cannot be 0.</p>\n<p>When a server’s pool has reached max_pool_size, operations for that\nserver block waiting for a socket to be returned to the pool. If\nwaitQueueTimeoutMS is set, a blocked operation will raise\nConnectionFailure after a timeout.\nBy default waitQueueTimeoutMS is not set.</p>\n\nnodes<p>Set of all currently connected servers.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">When connected to a replica set the value of nodes\ncan change over time as MongoClient‘s view of the replica\nset changes. nodes can also be an empty set when\nMongoClient is first instantiated and hasn’t yet connected\nto any servers, or a network partition causes it to lose connection\nto all servers.</p>\n\n\nmax_bson_size<p>The largest BSON object the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p>\n\nmax_message_size<p>The largest message the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p>\n\nlocal_threshold_ms<p>The local threshold for this instance.</p>\n\ncodec_options<p>Read only access to the CodecOptions\nof this instance.</p>\n\nread_preference<p>Read only access to the read preference of this instance.</p>\n\n<p>Changed in version 3.0: The read_preference attribute is now read only.</p>\n\n\nwrite_concern<p>Read only access to the WriteConcern\nof this instance.</p>\n\n<p>Changed in version 3.0: The write_concern attribute is now read only.</p>\n\n\nis_locked<p>Is this server locked? While locked, all write operations\nare blocked, although read operations may still be allowed.\nUse unlock() to unlock.</p>\n\nc[db_name] || c.db_name<p>Get the db_name Database on MongoClient c.</p>\n<p>Raises InvalidName if an invalid database name is used.</p>\n<p>Client for a MongoDB instance, a replica set, or a set of mongoses.</p>\n<p>The client object is thread-safe and has connection-pooling built in.\nIf an operation fails because of a network error,\nConnectionFailure is raised and the client\nreconnects in the background. Application code should handle this\nexception (recognizing that the operation failed) and then continue to\nexecute.</p>\n<p>The <code>host</code> parameter can be a full mongodb URI, in addition to\na simple hostname. It can also be a list of hostnames or\nURIs. Any port specified in the host string(s) will override\nthe <code>port</code> parameter. If multiple mongodb URIs containing\ndatabase or auth information are passed, the last database,\nusername, and password present will be used.  For username and\npasswords reserved characters like ‘:’, ‘/’, ‘+’ and ‘@’ must be\npercent encoded following RFC 2396:</p>\n<pre>try:\n    # Python 3.x\n    from urllib.parse import quote_plus\nexcept ImportError:\n    # Python 2.x\n    from urllib import quote_plus\n\nuri = "mongodb://%s:%s@%s" % (\n    quote_plus(user), quote_plus(password), host)\nclient = MongoClient(uri)\n</pre>\n\n<p>Unix domain sockets are also supported. The socket path must be percent\nencoded in the URI:</p>\n<pre>uri = "mongodb://%s:%s@%s" % (\n    quote_plus(user), quote_plus(password), quote_plus(socket_path))\nclient = MongoClient(uri)\n</pre>\n\n<p>But not when passed as a simple hostname:</p>\n<pre>client = MongoClient('/tmp/mongodb-27017.sock')\n</pre>\n\n\n<p class="first admonition-title">Note</p>\n<p>Starting with version 3.0 the MongoClient\nconstructor no longer blocks while connecting to the server or\nservers, and it no longer raises\nConnectionFailure if they are\nunavailable, nor ConfigurationError\nif the user’s credentials are wrong. Instead, the constructor\nreturns immediately and launches the connection process on\nbackground threads. You can check if the server is available\nlike this:</p>\n<pre>from pymongo.errors import ConnectionFailure\nclient = MongoClient()\ntry:\n    # The ismaster command is cheap and does not require auth.\n    client.admin.command('ismaster')\nexcept ConnectionFailure:\n    print("Server not available")\n</pre>\n\n\n\n<p class="first admonition-title">Warning</p>\n<p class="last">When using PyMongo in a multiprocessing context, please\nread Using PyMongo with Multiprocessing first.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>host</code> (optional): hostname or IP address or Unix domain socket\npath of a single mongod or mongos instance to connect to, or a\nmongodb URI, or a list of hostnames / mongodb URIs. If <code>host</code> is\nan IPv6 literal it must be enclosed in ‘[‘ and ‘]’ characters\nfollowing the RFC2732 URL syntax (e.g. ‘[::1]’ for localhost).\nMultihomed and round robin DNS addresses are <strong>not</strong> supported.</li>\n<li><code>port</code> (optional): port number on which to connect</li>\n<li><code>document_class</code> (optional): default class to use for\ndocuments returned from queries on this client</li>\n<li><code>tz_aware</code> (optional): if True,\ndatetime instances returned as values\nin a document by this MongoClient will be timezone\naware (otherwise they will be naive)</li>\n<li><code>connect</code> (optional): if True (the default), immediately\nbegin connecting to MongoDB in the background. Otherwise connect\non the first operation.</li>\n</ul>\n\n<strong>Other optional parameters can be passed as keyword arguments:</strong>\n\n<ul>\n<li><code>maxPoolSize</code> (optional): The maximum allowable number of\nconcurrent connections to each connected server. Requests to a\nserver will block if there are <code>maxPoolSize</code> outstanding\nconnections to the requested server. Defaults to 100. Cannot be 0.</li>\n<li><code>minPoolSize</code> (optional): The minimum required number of concurrent\nconnections that the pool will maintain to each connected server.\nDefault is 0.</li>\n<li><code>maxIdleTimeMS</code> (optional): The maximum number of milliseconds that\na connection can remain idle in the pool before being removed and\nreplaced. Defaults to <code>None</code> (no limit).</li>\n<li><code>socketTimeoutMS</code>: (integer or None) Controls how long (in\nmilliseconds) the driver will wait for a response after sending an\nordinary (non-monitoring) database operation before concluding that\na network error has occurred. Defaults to None (no timeout).</li>\n<li><code>connectTimeoutMS</code>: (integer or None) Controls how long (in\nmilliseconds) the driver will wait during server monitoring when\nconnecting a new socket to a server before concluding the server\nis unavailable. Defaults to 20000 (20 seconds).</li>\n<li><code>serverSelectionTimeoutMS</code>: (integer) Controls how long (in\nmilliseconds) the driver will wait to find an available,\nappropriate server to carry out a database operation; while it is\nwaiting, multiple server monitoring operations may be carried out,\neach controlled by <code>connectTimeoutMS</code>. Defaults to 30000 (30\nseconds).</li>\n<li><code>waitQueueTimeoutMS</code>: (integer or None) How long (in milliseconds)\na thread will wait for a socket from the pool if the pool has no\nfree sockets. Defaults to None (no timeout).</li>\n<li><code>waitQueueMultiple</code>: (integer or None) Multiplied by maxPoolSize\nto give the number of threads allowed to wait for a socket at one\ntime. Defaults to None (no limit).</li>\n<li><code>socketKeepAlive</code>: (boolean) Whether to send periodic keep-alive\npackets on connected sockets. Defaults to False (do not send\nkeep-alive packets).</li>\n<li><code>heartbeatFrequencyMS</code>: (optional) The number of milliseconds\nbetween periodic server checks, or None to accept the default\nfrequency of 10 seconds.</li>\n<li><code>appname</code>: (string or None) The name of the application that\ncreated this MongoClient instance. MongoDB 3.4 and newer will\nprint this value in the server log upon establishing each\nconnection. It is also recorded in the slow query log and\nprofile collections.</li>\n<li><code>event_listeners</code>: a list or tuple of event listeners. See\nmonitoring for details.</li>\n</ul>\n\n<strong>Write Concern options:</strong>\n(Only set if passed. No default values.)\n\n<ul>\n<li><code>w</code>: (integer or string) If this is a replica set, write operations\nwill block until they have been replicated to the specified number\nor tagged set of servers. <code>w=&lt;int&gt;</code> always includes the replica set\nprimary (e.g. w=3 means write to the primary and wait until\nreplicated to <strong>two</strong> secondaries). Passing w=0 <strong>disables write\nacknowledgement</strong> and all other write concern options.</li>\n<li><code>wtimeout</code>: (integer) Used in conjunction with <code>w</code>. Specify a value\nin milliseconds to control how long to wait for write propagation\nto complete. If replication does not complete in the given\ntimeframe, a timeout exception is raised.</li>\n<li><code>j</code>: If True block until write operations have been committed\nto the journal. Cannot be used in combination with <code>fsync</code>. Prior\nto MongoDB 2.6 this option was ignored if the server was running\nwithout journaling. Starting with MongoDB 2.6 write operations will\nfail with an exception if this option is used when the server is\nrunning without journaling.</li>\n<li><code>fsync</code>: If True and the server is running without journaling,\nblocks until the server has synced all data files to disk. If the\nserver is running with journaling, this acts the same as the <code>j</code>\noption, blocking until write operations have been committed to the\njournal. Cannot be used in combination with <code>j</code>.</li>\n</ul>\n\n<strong>Replica set keyword arguments for connecting with a replica set\n- either directly or via a mongos:</strong>\n\n<ul>\n<li><code>replicaSet</code>: (string or None) The name of the replica set to\nconnect to. The driver will verify that all servers it connects to\nmatch this name. Implies that the hosts specified are a seed list\nand the driver should attempt to find all members of the set.\nDefaults to None.</li>\n</ul>\n\n<strong>Read Preference:</strong>\n\n<ul>\n<li><code>readPreference</code>: The replica set read preference for this client.\nOne of primary, primaryPreferred, secondary,\nsecondaryPreferred, or nearest. Defaults to primary.</li>\n<li><code>readPreferenceTags</code>: Specifies a tag set as a comma-separated list\nof colon-separated key-value pairs. For example dc:ny,rack:1.\nDefaults to None.</li>\n<li><code>maxStalenessSeconds</code>: (integer) The maximum estimated\nlength of time a replica set secondary can fall behind the primary\nin replication before it will no longer be selected for operations.\nDefaults to -1, meaning no maximum. If maxStalenessSeconds\nis set, it must be a positive integer greater than or equal to\n90 seconds.</li>\n</ul>\n\n<strong>SSL configuration:</strong>\n\n<ul>\n<li><code>ssl</code>: If True, create the connection to the server using SSL.\nDefaults to False.</li>\n<li><code>ssl_certfile</code>: The certificate file used to identify the local\nconnection against mongod. Implies ssl=True. Defaults to\nNone.</li>\n<li><code>ssl_keyfile</code>: The private keyfile used to identify the local\nconnection against mongod.  If included with the certfile then\nonly the ssl_certfile is needed.  Implies ssl=True.\nDefaults to None.</li>\n<li><code>ssl_pem_passphrase</code>: The password or passphrase for decrypting\nthe private key in ssl_certfile or ssl_keyfile. Only\nnecessary if the private key is encrypted. Only supported by python\n2.7.9+ (pypy 2.5.1+) and 3.3+. Defaults to None.</li>\n<li><code>ssl_cert_reqs</code>: Specifies whether a certificate is required from\nthe other side of the connection, and whether it will be validated\nif provided. It must be one of the three values ssl.CERT_NONE\n(certificates ignored), ssl.CERT_REQUIRED (certificates\nrequired and validated), or ssl.CERT_OPTIONAL (the same as\nCERT_REQUIRED, unless the server was configured to use anonymous\nciphers). If the value of this parameter is not ssl.CERT_NONE\nand a value is not provided for ssl_ca_certs PyMongo will\nattempt to load system provided CA certificates. If the python\nversion in use does not support loading system CA certificates\nthen the ssl_ca_certs parameter must point to a file of CA\ncertificates. Implies ssl=True. Defaults to\nssl.CERT_REQUIRED if not provided and ssl=True.</li>\n<li><code>ssl_ca_certs</code>: The ca_certs file contains a set of concatenated\n“certification authority” certificates, which are used to validate\ncertificates passed from the other end of the connection.\nImplies ssl=True. Defaults to None.</li>\n<li><code>ssl_crlfile</code>: The path to a PEM or DER formatted certificate\nrevocation list. Only supported by python 2.7.9+ (pypy 2.5.1+)\nand 3.4+. Defaults to None.</li>\n<li><code>ssl_match_hostname</code>: If True (the default), and\n<code>ssl_cert_reqs</code> is not ssl.CERT_NONE, enables hostname\nverification using the match_hostname() function from\npython’s ssl module. Think very carefully before setting\nthis to False as that could make your application vulnerable to\nman-in-the-middle attacks.</li>\n</ul>\n\n<strong>Read Concern options:</strong>\n(If not set explicitly, this will use the server default)\n\n<ul>\n<li><code>readConcernLevel</code>: (string) The read concern level specifies the\nlevel of isolation for read operations.  For example, a read\noperation using a read concern level of majority will only\nreturn data that has been written to a majority of nodes. If the\nlevel is left unspecified, the server default will be used.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>connections</em></p>\n\n\n<p>Changed in version 3.0: MongoClient is now the one and only\nclient class for a standalone server, mongos, or replica set.\nIt includes the functionality that had been split into\nMongoReplicaSetClient: it can connect\nto a replica set, discover all its members, and monitor the set for\nstepdowns, elections, and reconfigs.</p>\n<p>The MongoClient constructor no\nlonger blocks while connecting to the server or servers, and it no\nlonger raises ConnectionFailure if they\nare unavailable, nor ConfigurationError\nif the user’s credentials are wrong. Instead, the constructor\nreturns immediately and launches the connection process on\nbackground threads.</p>\n<p>Therefore the alive method is removed since it no longer\nprovides meaningful information; even if the client is disconnected,\nit may discover a server in time to fulfill the next operation.</p>\n<p>In PyMongo 2.x, MongoClient accepted a list of\nstandalone MongoDB servers and used the first it could connect to:</p>\n<pre>MongoClient(['host1.com:27017', 'host2.com:27017'])\n</pre>\n\n<p>A list of multiple standalones is no longer supported; if multiple\nservers are listed they must be members of the same replica set, or\nmongoses in the same sharded cluster.</p>\n<p>The behavior for a list of mongoses is changed from “high\navailability” to “load balancing”. Before, the client connected to\nthe lowest-latency mongos in the list, and used it until a network\nerror prompted it to re-evaluate all mongoses’ latencies and\nreconnect to one of them. In PyMongo 3, the client monitors its\nnetwork latency to all the mongoses continuously, and distributes\noperations evenly among those with the lowest latency. See\nmongos Load Balancing for more information.</p>\n<p>The connect option is added.</p>\n<p>The start_request, in_request, and end_request methods\nare removed, as well as the auto_start_request option.</p>\n<p>The copy_database method is removed, see the\n<em>copy_database examples</em> for alternatives.</p>\n<p>The MongoClient.disconnect() method is removed; it was a\nsynonym for close().</p>\n<p>MongoClient no longer returns an\ninstance of Database for attribute names\nwith leading underscores. You must use dict-style lookups instead:</p>\n<pre>client['__my_database__']\n</pre>\n\n<p>Not:</p>\n<pre>client.__my_database__\n</pre>\n\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_client.html#pymongo.mongo_client.MongoClient
pymongo mongo_replica_set_client MongoReplicaSetClient	A										<section class="prog_container"><pre><code>\nclass pymongo.mongo_replica_set_client.MongoReplicaSetClient(<em>hosts_or_uri</em>, <em>document_class=dict</em>, <em>tz_aware=False</em>, <em>connect=True</em>, <em>**kwargs</em>)</pre></code><p>\nclose()<p>Disconnect from MongoDB.</p>\n<p>Close all sockets in the connection pools and stop the monitor threads.\nIf this instance is used again it will be automatically re-opened and\nthe threads restarted.</p>\n\ndatabase_names()<p>Get a list of the names of all databases on the connected server.</p>\n\ndrop_database(<em>name_or_database</em>)<p>Drop a database.</p>\n<p>Raises TypeError if name_or_database is not an instance of\nbasestring (str in python 3) or\nDatabase.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name_or_database: the name of a database to drop, or a\nDatabase instance representing the\ndatabase to drop</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p class="first admonition-title">Note</p>\n<p class="last">The write_concern of\nthis client is automatically applied to this operation when using\nMongoDB &gt;= 3.4.</p>\n\n\n<p>Changed in version 3.4: Apply this client’s write concern automatically to this operation\nwhen connected to MongoDB &gt;= 3.4.</p>\n\n\nget_default_database()<p>Get the database named in the MongoDB connection URI.</p>\n<pre>&gt;&gt;&gt; uri = 'mongodb://host/my_database'\n&gt;&gt;&gt; client = MongoClient(uri)\n&gt;&gt;&gt; db = client.get_default_database()\n&gt;&gt;&gt; assert db.name == 'my_database'\n</pre>\n\n<p>Useful in scripts where you want to choose which database to use\nbased only on the URI in a configuration file.</p>\n\nget_database(<em>name</em>, <em>codec_options=None</em>, <em>read_preference=None</em>, <em>write_concern=None</em>, <em>read_concern=None</em>)<p>Get a Database with the given name and\noptions.</p>\n<p>Useful for creating a Database with\ndifferent codec options, read preference, and/or write concern from\nthis MongoClient.</p>\n<pre>&gt;&gt;&gt; client.read_preference\nPrimary()\n&gt;&gt;&gt; db1 = client.test\n&gt;&gt;&gt; db1.read_preference\nPrimary()\n&gt;&gt;&gt; from pymongo import ReadPreference\n&gt;&gt;&gt; db2 = client.get_database(\n...     'test', read_preference=ReadPreference.SECONDARY)\n&gt;&gt;&gt; db2.read_preference\nSecondary(tag_sets=None)\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>name: The name of the database - a string.</li>\n<li>codec_options (optional): An instance of\nCodecOptions. If None (the\ndefault) the codec_options of this MongoClient is\nused.</li>\n<li>read_preference (optional): The read preference to use. If\nNone (the default) the read_preference of this\nMongoClient is used. See read_preferences\nfor options.</li>\n<li>write_concern (optional): An instance of\nWriteConcern. If None (the\ndefault) the write_concern of this MongoClient is\nused.</li>\n<li>read_concern (optional): An instance of\nReadConcern. If None (the\ndefault) the read_concern of this MongoClient is\nused.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nclose_cursor(<em>cursor_id</em>, <em>address=None</em>)<p>Send a kill cursors message soon with the given id.</p>\n<p>Raises TypeError if cursor_id is not an instance of\n(int, long). What closing the cursor actually means\ndepends on this client’s cursor manager.</p>\n<p>This method may be called from a Cursor\ndestructor during garbage collection, so it isn’t safe to take a\nlock or do network I/O. Instead, we schedule the cursor to be closed\nsoon on a background thread.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>cursor_id: id of cursor to close</li>\n<li>address (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Added address parameter.</p>\n\n\nkill_cursors(<em>cursor_ids</em>, <em>address=None</em>)<p>DEPRECATED - Send a kill cursors message soon with the given ids.</p>\n<p>Raises TypeError if cursor_ids is not an instance of\nlist.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>cursor_ids: list of cursor ids to kill</li>\n<li>address (optional): (host, port) pair of the cursor’s server.\nIf it is not provided, the client attempts to close the cursor on\nthe primary or standalone, or a mongos server.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.3: Deprecated.</p>\n\n\n<p>Changed in version 3.0: Now accepts an address argument. Schedules the cursors to be\nclosed on a background thread instead of sending the message\nimmediately.</p>\n\n\nset_cursor_manager(<em>manager_class</em>)<p>DEPRECATED - Set this client’s cursor manager.</p>\n<p>Raises TypeError if manager_class is not a subclass of\nCursorManager. A cursor manager\nhandles closing cursors. Different managers can implement different\npolicies in terms of when to actually kill a cursor that has\nbeen closed.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>manager_class: cursor manager to use</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.3: Deprecated, for real this time.</p>\n\n\n<p>Changed in version 3.0: Undeprecated.</p>\n\n\nprimary<p>The (host, port) of the current primary of the replica set.</p>\n<p>Returns None if this client is not connected to a replica set,\nthere is no primary, or this client was created without the\nreplicaSet option.</p>\n\n<p>New in version 3.0: MongoClient gained this property in version 3.0 when\nMongoReplicaSetClient’s functionality was merged in.</p>\n\n\nsecondaries<p>The secondary members known to this client.</p>\n<p>A sequence of (host, port) pairs. Empty if this client is not\nconnected to a replica set, there are no visible secondaries, or this\nclient was created without the replicaSet option.</p>\n\n<p>New in version 3.0: MongoClient gained this property in version 3.0 when\nMongoReplicaSetClient’s functionality was merged in.</p>\n\n\narbiters<p>Arbiters in the replica set.</p>\n<p>A sequence of (host, port) pairs. Empty if this client is not\nconnected to a replica set, there are no arbiters, or this client was\ncreated without the replicaSet option.</p>\n\nmax_pool_size<p>The maximum allowable number of concurrent connections to each\nconnected server. Requests to a server will block if there are\nmaxPoolSize outstanding connections to the requested server.\nDefaults to 100. Cannot be 0.</p>\n<p>When a server’s pool has reached max_pool_size, operations for that\nserver block waiting for a socket to be returned to the pool. If\nwaitQueueTimeoutMS is set, a blocked operation will raise\nConnectionFailure after a timeout.\nBy default waitQueueTimeoutMS is not set.</p>\n\nmax_bson_size<p>The largest BSON object the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p>\n\nmax_message_size<p>The largest message the connected server accepts in bytes.</p>\n<p>If the client is not connected, this will block until a connection is\nestablished or raise ServerSelectionTimeoutError if no server is\navailable.</p>\n\nlocal_threshold_ms<p>The local threshold for this instance.</p>\n\ncodec_options<p>Read only access to the CodecOptions\nof this instance.</p>\n\nread_preference<p>Read only access to the read preference of this instance.</p>\n\n<p>Changed in version 3.0: The read_preference attribute is now read only.</p>\n\n\nwrite_concern<p>Read only access to the WriteConcern\nof this instance.</p>\n\n<p>Changed in version 3.0: The write_concern attribute is now read only.</p>\n\n\nc[db_name] || c.db_name<p>Get the db_name Database on MongoReplicaSetClient c.</p>\n<p>Raises InvalidName if an invalid database name is used.</p>\n<p>Deprecated alias for MongoClient.</p>\n<p>MongoReplicaSetClient\nwill be removed in a future version of PyMongo.</p>\n\n<p>Changed in version 3.0: MongoClient is now the one and only\nclient class for a standalone server, mongos, or replica set.\nIt includes the functionality that had been split into\nMongoReplicaSetClient: it\ncan connect to a replica set, discover all its members, and monitor\nthe set for stepdowns, elections, and reconfigs.</p>\n<p>The refresh method is removed from\nMongoReplicaSetClient,\nas are the seeds and hosts properties.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/mongo_replica_set_client.html#pymongo.mongo_replica_set_client.MongoReplicaSetClient
pymongo operations DeleteMany	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.DeleteMany(<em>filter</em>)</pre></code><p><p>Create a DeleteMany instance.</p>\n<p>For use with bulk_write().</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>filter</code>: A query that matches the documents to delete.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.DeleteMany
pymongo operations DeleteOne	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.DeleteOne(<em>filter</em>)</pre></code><p><p>Create a DeleteOne instance.</p>\n<p>For use with bulk_write().</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>filter</code>: A query that matches the document to delete.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.DeleteOne
pymongo operations IndexModel	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.IndexModel(<em>keys</em>, <em>**kwargs</em>)</pre></code><p>\ndocument<p>An index document suitable for passing to the createIndexes\ncommand.</p>\n<p>Create an Index instance.</p>\n<p>For use with create_indexes().</p>\n<p>Takes either a single key or a list of (key, direction) pairs.\nThe key(s) must be an instance of basestring\n(str in python 3), and the direction(s) must be one of\n(ASCENDING, DESCENDING,\nGEO2D, GEOHAYSTACK,\nGEOSPHERE, HASHED,\nTEXT).</p>\n<p>Valid options include, but are not limited to:</p>\n\n<ul>\n<li><code>name</code>: custom name to use for this index - if none is\ngiven, a name will be generated.</li>\n<li><code>unique</code>: if True creates a uniqueness constraint on the index.</li>\n<li><code>background</code>: if True this index should be created in the\nbackground.</li>\n<li><code>sparse</code>: if True, omit from the index any documents that lack\nthe indexed field.</li>\n<li><code>bucketSize</code>: for use with geoHaystack indexes.\nNumber of documents to group together within a certain proximity\nto a given longitude and latitude.</li>\n<li><code>min</code>: minimum value for keys in a GEO2D\nindex.</li>\n<li><code>max</code>: maximum value for keys in a GEO2D\nindex.</li>\n<li><code>expireAfterSeconds</code>: &lt;int&gt; Used to create an expiring (TTL)\ncollection. MongoDB will automatically delete documents from\nthis collection after &lt;int&gt; seconds. The indexed field must\nbe a UTC datetime or the data will not expire.</li>\n<li><code>partialFilterExpression</code>: A document that specifies a filter for\na partial index.</li>\n<li><code>collation</code>: An instance of <code>~pymongo.collation.Collation</code> that\nspecifies the collation to use in MongoDB &gt;= 3.4.</li>\n</ul>\n\n<p>See the MongoDB documentation for a full list of supported options by\nserver version.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last"><code>partialFilterExpression</code> requires server version <strong>&gt;= 3.2</strong></p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>keys</code>: a single key or a list of (key, direction)\npairs specifying the index to create</li>\n<li><code>**kwargs</code> (optional): any additional index creation\noptions (see the above list) should be passed as keyword\narguments</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.2: Added partialFilterExpression to support partial indexes.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.IndexModel
pymongo operations InsertOne	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.InsertOne(<em>document</em>)</pre></code><p><p>Create an InsertOne instance.</p>\n<p>For use with bulk_write().</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>document</code>: The document to insert. If the document is missing an\n_id field one will be added.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.InsertOne
pymongo operations ReplaceOne	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.ReplaceOne(<em>filter</em>, <em>replacement</em>, <em>upsert=False</em>)</pre></code><p><p>Create a ReplaceOne instance.</p>\n<p>For use with bulk_write().</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>filter</code>: A query that matches the document to replace.</li>\n<li><code>replacement</code>: The new document.</li>\n<li><code>upsert</code> (optional): If True, perform an insert if no documents\nmatch the filter.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.ReplaceOne
pymongo operations UpdateMany	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.UpdateMany(<em>filter</em>, <em>update</em>, <em>upsert=False</em>)</pre></code><p><p>Create an UpdateMany instance.</p>\n<p>For use with bulk_write().</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>filter</code>: A query that matches the documents to update.</li>\n<li><code>update</code>: The modifications to apply.</li>\n<li><code>upsert</code> (optional): If True, perform an insert if no documents\nmatch the filter.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.UpdateMany
pymongo operations UpdateOne	A										<section class="prog_container"><pre><code>\nclass pymongo.operations.UpdateOne(<em>filter</em>, <em>update</em>, <em>upsert=False</em>)</pre></code><p><p>Represents an update_one operation.</p>\n<p>For use with bulk_write().</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>filter</code>: A query that matches the document to update.</li>\n<li><code>update</code>: The modifications to apply.</li>\n<li><code>upsert</code> (optional): If True, perform an insert if no documents\nmatch the filter.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/operations.html#pymongo.operations.UpdateOne
pymongo pool SocketInfo	A										<section class="prog_container"><pre><code>\nclass pymongo.pool.SocketInfo(<em>sock</em>, <em>pool</em>, <em>ismaster</em>, <em>address</em>)</pre></code><p>\nauthenticate(<em>credentials</em>)<p>Log in to the server and store these credentials in authset.</p>\n<p>Can raise ConnectionFailure or OperationFailure.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>credentials: A MongoCredential.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ncheck_auth(<em>all_credentials</em>)<p>Update this socket’s authentication.</p>\n<p>Log in or out to bring this socket’s credentials up to date with\nthose provided. Can raise ConnectionFailure or OperationFailure.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>all_credentials: dict, maps auth source to MongoCredential.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ncommand(<em>dbname</em>, <em>spec</em>, <em>slave_ok=False</em>, <em>read_preference=Primary()</em>, <em>codec_options=CodecOptions(document_class=dict</em>, <em>tz_aware=False</em>, <em>uuid_representation=PYTHON_LEGACY</em>, <em>unicode_decode_error_handler='strict'</em>, <em>tzinfo=None)</em>, <em>check=True</em>, <em>allowable_errors=None</em>, <em>check_keys=False</em>, <em>read_concern=ReadConcern()</em>, <em>write_concern=None</em>, <em>parse_write_concern_error=False</em>, <em>collation=None</em>)<p>Execute a command or raise ConnectionFailure or OperationFailure.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>dbname: name of the database on which to run the command</li>\n<li>spec: a command document as a dict, SON, or mapping object</li>\n<li>slave_ok: whether to set the SlaveOkay wire protocol bit</li>\n<li>read_preference: a read preference</li>\n<li>codec_options: a CodecOptions instance</li>\n<li>check: raise OperationFailure if there are errors</li>\n<li>allowable_errors: errors to ignore if check is True</li>\n<li>check_keys: if True, check spec for invalid keys</li>\n<li>read_concern: The read concern for this command.</li>\n<li>write_concern: The write concern for this command.</li>\n<li>parse_write_concern_error: Whether to parse the\nwriteConcernError field in the command response.</li>\n<li>collation: The collation for this command.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nlegacy_write(<em>request_id</em>, <em>msg</em>, <em>max_doc_size</em>, <em>with_last_error</em>)<p>Send OP_INSERT, etc., optionally returning response as a dict.</p>\n<p>Can raise ConnectionFailure or OperationFailure.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>request_id: an int.</li>\n<li>msg: bytes, an OP_INSERT, OP_UPDATE, or OP_DELETE message,\nperhaps with a getlasterror command appended.</li>\n<li>max_doc_size: size in bytes of the largest document in msg.</li>\n<li>with_last_error: True if a getlasterror command is appended.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nreceive_message(<em>operation</em>, <em>request_id</em>)<p>Receive a raw BSON message or raise ConnectionFailure.</p>\n<p>If any exception is raised, the socket is closed.</p>\n\nsend_message(<em>message</em>, <em>max_doc_size</em>)<p>Send a raw BSON message or raise ConnectionFailure.</p>\n<p>If a network exception is raised, the socket is closed.</p>\n\nwrite_command(<em>request_id</em>, <em>msg</em>)<p>Send “insert” etc. command, returning response as a dict.</p>\n<p>Can raise ConnectionFailure or OperationFailure.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>request_id: an int.</li>\n<li>msg: bytes, the command message.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Store a socket with some metadata.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>sock</code>: a raw socket object</li>\n<li><code>pool</code>: a Pool instance</li>\n<li><code>ismaster</code>: optional IsMaster instance, response to ismaster on <code>sock</code></li>\n<li><code>address</code>: the server’s (host, port)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/pool.html#pymongo.pool.SocketInfo
pymongo read_concern ReadConcern	A										<section class="prog_container"><pre><code>\nclass pymongo.read_concern.ReadConcern(<em>level=None</em>)</pre></code><p>\ndocument<p>The document representation of this read concern.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">ReadConcern is immutable. Mutating the value of\ndocument does not mutate this ReadConcern.</p>\n\n\nlevel<p>The read concern level.</p>\n\nok_for_legacy<p>Return True if this read concern is compatible with\nold wire protocol versions.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>level</code>: (string) The read concern level specifies the level of\nisolation for read operations.  For example, a read operation using a\nread concern level of majority will only return data that has been\nwritten to a majority of nodes. If the level is left unspecified, the\nserver default will be used.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 3.2.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_concern.html#pymongo.read_concern.ReadConcern
pymongo read_preferences Primary	A										<section class="prog_container"><pre><code>\nclass pymongo.read_preferences.Primary</pre></code><p>\ndocument<p>Read preference as a document.</p>\n\nmode<p>The mode of this read preference instance.</p>\n\nname<p>The name of this read preference.</p>\n<p>Primary read preference.</p>\n<ul>\n<li>When directly connected to one mongod queries are allowed if the server\nis standalone or a replica set primary.</li>\n<li>When connected to a mongos queries are sent to the primary of a shard.</li>\n<li>When connected to a replica set queries are sent to the primary of\nthe replica set.</li>\n</ul>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Primary
pymongo read_preferences PrimaryPreferred	A										<section class="prog_container"><pre><code>\nclass pymongo.read_preferences.PrimaryPreferred(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p>\ndocument<p>Read preference as a document.</p>\n\nmax_staleness<p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p>\n\nmin_wire_version<p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\nmin_wire_version, or the driver raises\nConfigurationError.</p>\n\nmode<p>The mode of this read preference instance.</p>\n\nname<p>The name of this read preference.</p>\n\ntag_sets<p>Set tag_sets to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose dc tag has the value "ny".\nTo specify a priority-order for tag sets, provide a list of\ntag sets: [{'dc': 'ny'}, {'dc': 'la'}, {}]. A final, empty tag\nset, {}, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">Data-Center Awareness</p>\n\n\n<p>PrimaryPreferred read preference.</p>\n<ul>\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are sent to the primary of a shard if\navailable, otherwise a shard secondary.</li>\n<li>When connected to a replica set queries are sent to the primary if\navailable, otherwise a secondary.</li>\n</ul>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>tag_sets</code>: The tag_sets to use if the primary is not\navailable.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.PrimaryPreferred
pymongo read_preferences Secondary	A										<section class="prog_container"><pre><code>\nclass pymongo.read_preferences.Secondary(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p>\ndocument<p>Read preference as a document.</p>\n\nmax_staleness<p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p>\n\nmin_wire_version<p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\nmin_wire_version, or the driver raises\nConfigurationError.</p>\n\nmode<p>The mode of this read preference instance.</p>\n\nname<p>The name of this read preference.</p>\n\ntag_sets<p>Set tag_sets to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose dc tag has the value "ny".\nTo specify a priority-order for tag sets, provide a list of\ntag sets: [{'dc': 'ny'}, {'dc': 'la'}, {}]. A final, empty tag\nset, {}, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">Data-Center Awareness</p>\n\n\n<p>Secondary read preference.</p>\n<ul>\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are distributed among shard\nsecondaries. An error is raised if no secondaries are available.</li>\n<li>When connected to a replica set queries are distributed among\nsecondaries. An error is raised if no secondaries are available.</li>\n</ul>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>tag_sets</code>: The tag_sets for this read preference.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Secondary
pymongo read_preferences SecondaryPreferred	A										<section class="prog_container"><pre><code>\nclass pymongo.read_preferences.SecondaryPreferred(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p>\ndocument<p>Read preference as a document.</p>\n\nmax_staleness<p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p>\n\nmin_wire_version<p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\nmin_wire_version, or the driver raises\nConfigurationError.</p>\n\nmode<p>The mode of this read preference instance.</p>\n\nname<p>The name of this read preference.</p>\n\ntag_sets<p>Set tag_sets to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose dc tag has the value "ny".\nTo specify a priority-order for tag sets, provide a list of\ntag sets: [{'dc': 'ny'}, {'dc': 'la'}, {}]. A final, empty tag\nset, {}, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">Data-Center Awareness</p>\n\n\n<p>SecondaryPreferred read preference.</p>\n<ul>\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are distributed among shard\nsecondaries, or the shard primary if no secondary is available.</li>\n<li>When connected to a replica set queries are distributed among\nsecondaries, or the primary if no secondary is available.</li>\n</ul>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>tag_sets</code>: The tag_sets for this read preference.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.SecondaryPreferred
pymongo read_preferences Nearest	A										<section class="prog_container"><pre><code>\nclass pymongo.read_preferences.Nearest(<em>tag_sets=None</em>, <em>max_staleness=-1</em>)</pre></code><p>\ndocument<p>Read preference as a document.</p>\n\nmax_staleness<p>The maximum estimated length of time (in seconds) a replica set\nsecondary can fall behind the primary in replication before it will\nno longer be selected for operations, or -1 for no maximum.</p>\n\nmin_wire_version<p>The wire protocol version the server must support.</p>\n<p>Some read preferences impose version requirements on all servers (e.g.\nmaxStalenessSeconds requires MongoDB 3.4 / maxWireVersion 5).</p>\n<p>All servers’ maxWireVersion must be at least this read preference’s\nmin_wire_version, or the driver raises\nConfigurationError.</p>\n\nmode<p>The mode of this read preference instance.</p>\n\nname<p>The name of this read preference.</p>\n\ntag_sets<p>Set tag_sets to a list of dictionaries like [{‘dc’: ‘ny’}] to\nread only from members whose dc tag has the value "ny".\nTo specify a priority-order for tag sets, provide a list of\ntag sets: [{'dc': 'ny'}, {'dc': 'la'}, {}]. A final, empty tag\nset, {}, means “read from any member that matches the mode,\nignoring tags.” MongoReplicaSetClient tries each set of tags in turn\nuntil it finds a set of tags with at least one matching member.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">Data-Center Awareness</p>\n\n\n<p>Nearest read preference.</p>\n<ul>\n<li>When directly connected to one mongod queries are allowed to standalone\nservers, to a replica set primary, or to replica set secondaries.</li>\n<li>When connected to a mongos queries are distributed among all members of\na shard.</li>\n<li>When connected to a replica set queries are distributed among all\nmembers.</li>\n</ul>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>tag_sets</code>: The tag_sets for this read preference.</li>\n<li><code>max_staleness</code>: (integer, in seconds) The maximum estimated\nlength of time a replica set secondary can fall behind the primary in\nreplication before it will no longer be selected for operations.\nDefault -1, meaning no maximum. If it is set, it must be at least\n90 seconds.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.Nearest
pymongo read_preferences ReadPreference	A										<section class="prog_container"><pre><code>\nclass pymongo.read_preferences.ReadPreference</pre></code><p>\nPRIMARY = Primary()\nPRIMARY_PREFERRED = PrimaryPreferred(tag_sets=None, max_staleness=-1)\nSECONDARY = Secondary(tag_sets=None, max_staleness=-1)\nSECONDARY_PREFERRED = SecondaryPreferred(tag_sets=None, max_staleness=-1)\nNEAREST = Nearest(tag_sets=None, max_staleness=-1)<p>An enum that defines the read preference modes supported by PyMongo.</p>\n<p>See <em>High Availability and PyMongo</em> for code examples.</p>\n<p>A read preference is used in three cases:</p>\n<p>MongoClient connected to a single mongod:</p>\n<ul>\n<li>PRIMARY: Queries are allowed if the server is standalone or a replica\nset primary.</li>\n<li>All other modes allow queries to standalone servers, to a replica set\nprimary, or to replica set secondaries.</li>\n</ul>\n<p>MongoClient initialized with the\nreplicaSet option:</p>\n<ul>\n<li>PRIMARY: Read from the primary. This is the default, and provides the\nstrongest consistency. If no primary is available, raise\nAutoReconnect.</li>\n<li>PRIMARY_PREFERRED: Read from the primary if available, or if there is\nnone, read from a secondary.</li>\n<li>SECONDARY: Read from a secondary. If no secondary is available,\nraise AutoReconnect.</li>\n<li>SECONDARY_PREFERRED: Read from a secondary if available, otherwise\nfrom the primary.</li>\n<li>NEAREST: Read from any member.</li>\n</ul>\n<p>MongoClient connected to a mongos, with a\nsharded cluster of replica sets:</p>\n<ul>\n<li>PRIMARY: Read from the primary of the shard, or raise\nOperationFailure if there is none.\nThis is the default.</li>\n<li>PRIMARY_PREFERRED: Read from the primary of the shard, or if there is\nnone, read from a secondary of the shard.</li>\n<li>SECONDARY: Read from a secondary of the shard, or raise\nOperationFailure if there is none.</li>\n<li>SECONDARY_PREFERRED: Read from a secondary of the shard if available,\notherwise from the shard primary.</li>\n<li>NEAREST: Read from any shard member.</li>\n</ul>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/read_preferences.html#pymongo.read_preferences.ReadPreference
pymongo results BulkWriteResult	A										<section class="prog_container"><pre><code>\nclass pymongo.results.BulkWriteResult(<em>bulk_api_result</em>, <em>acknowledged</em>)</pre></code><p>\nacknowledged<p>Is this the result of an acknowledged write operation?</p>\n<p>The acknowledged attribute will be False when using\nWriteConcern(w=0), otherwise True.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">If the acknowledged attribute is False all other\nattibutes of this class will raise\nInvalidOperation when accessed. Values for\nother attributes cannot be determined if the write operation was\nunacknowledged.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">WriteConcern</p>\n\n\nbulk_api_result<p>The raw bulk API result.</p>\n\ndeleted_count<p>The number of documents deleted.</p>\n\ninserted_count<p>The number of documents inserted.</p>\n\nmatched_count<p>The number of documents matched for an update.</p>\n\nmodified_count<p>The number of documents modified.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">modified_count is only reported by MongoDB 2.6 and later.\nWhen connected to an earlier server version, or in certain mixed\nversion sharding configurations, this attribute will be set to\nNone.</p>\n\n\nupserted_count<p>The number of documents upserted.</p>\n\nupserted_ids<p>A map of operation index to the _id of the upserted document.</p>\n<p>Create a BulkWriteResult instance.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>bulk_api_result</code>: A result dict from the bulk API</li>\n<li><code>acknowledged</code>: Was this write result acknowledged? If False\nthen all properties of this object will raise\nInvalidOperation.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.BulkWriteResult
pymongo results DeleteResult	A										<section class="prog_container"><pre><code>\nclass pymongo.results.DeleteResult(<em>raw_result</em>, <em>acknowledged</em>)</pre></code><p>\nacknowledged<p>Is this the result of an acknowledged write operation?</p>\n<p>The acknowledged attribute will be False when using\nWriteConcern(w=0), otherwise True.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">If the acknowledged attribute is False all other\nattibutes of this class will raise\nInvalidOperation when accessed. Values for\nother attributes cannot be determined if the write operation was\nunacknowledged.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">WriteConcern</p>\n\n\ndeleted_count<p>The number of documents deleted.</p>\n\nraw_result<p>The raw result document returned by the server.</p>\n<p>The return type for delete_one()\nand delete_many()</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.DeleteResult
pymongo results InsertManyResult	A										<section class="prog_container"><pre><code>\nclass pymongo.results.InsertManyResult(<em>inserted_ids</em>, <em>acknowledged</em>)</pre></code><p>\nacknowledged<p>Is this the result of an acknowledged write operation?</p>\n<p>The acknowledged attribute will be False when using\nWriteConcern(w=0), otherwise True.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">If the acknowledged attribute is False all other\nattibutes of this class will raise\nInvalidOperation when accessed. Values for\nother attributes cannot be determined if the write operation was\nunacknowledged.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">WriteConcern</p>\n\n\ninserted_ids<p>A list of _ids of the inserted documents, in the order provided.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">If False is passed for the ordered parameter to\ninsert_many() the server\nmay have inserted the documents in a different order than what\nis presented here.</p>\n\n<p>The return type for insert_many().</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertManyResult
pymongo results InsertOneResult	A										<section class="prog_container"><pre><code>\nclass pymongo.results.InsertOneResult(<em>inserted_id</em>, <em>acknowledged</em>)</pre></code><p>\nacknowledged<p>Is this the result of an acknowledged write operation?</p>\n<p>The acknowledged attribute will be False when using\nWriteConcern(w=0), otherwise True.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">If the acknowledged attribute is False all other\nattibutes of this class will raise\nInvalidOperation when accessed. Values for\nother attributes cannot be determined if the write operation was\nunacknowledged.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">WriteConcern</p>\n\n\ninserted_id<p>The inserted document’s _id.</p>\n<p>The return type for insert_one().</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.InsertOneResult
pymongo results UpdateResult	A										<section class="prog_container"><pre><code>\nclass pymongo.results.UpdateResult(<em>raw_result</em>, <em>acknowledged</em>)</pre></code><p>\nacknowledged<p>Is this the result of an acknowledged write operation?</p>\n<p>The acknowledged attribute will be False when using\nWriteConcern(w=0), otherwise True.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">If the acknowledged attribute is False all other\nattibutes of this class will raise\nInvalidOperation when accessed. Values for\nother attributes cannot be determined if the write operation was\nunacknowledged.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="last">WriteConcern</p>\n\n\nmatched_count<p>The number of documents matched for this update.</p>\n\nmodified_count<p>The number of documents modified.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">modified_count is only reported by MongoDB 2.6 and later.\nWhen connected to an earlier server version, or in certain mixed\nversion sharding configurations, this attribute will be set to\nNone.</p>\n\n\nraw_result<p>The raw result document returned by the server.</p>\n\nupserted_id<p>The _id of the inserted document if an upsert took place. Otherwise\nNone.</p>\n<p>The return type for update_one(),\nupdate_many(), and\nreplace_one().</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/results.html#pymongo.results.UpdateResult
pymongo son_manipulator AutoReference	A										<section class="prog_container"><pre><code>\nclass pymongo.son_manipulator.AutoReference(<em>db</em>)</pre></code><p>\ntransform_incoming(<em>son</em>, <em>collection</em>)<p>Replace embedded documents with DBRefs.</p>\n\ntransform_outgoing(<em>son</em>, <em>collection</em>)<p>Replace DBRefs with embedded documents.</p>\n\nwill_copy()<p>We need to copy so the user’s document doesn’t get transformed refs.</p>\n<p>Transparently reference and de-reference already saved embedded objects.</p>\n<p>This manipulator should probably only be used when the NamespaceInjector is\nalso being used, otherwise it doesn’t make too much sense - documents can\nonly be auto-referenced if they have an <em>_ns</em> field.</p>\n<p>NOTE: this will behave poorly if you have a circular reference.</p>\n<p>TODO: this only works for documents that are in the same database. To fix\nthis we’ll need to add a DatabaseInjector that adds <em>_db</em> and then make\nuse of the optional <em>database</em> support for DBRefs.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.AutoReference
pymongo son_manipulator NamespaceInjector	A										<section class="prog_container"><pre><code>\nclass pymongo.son_manipulator.NamespaceInjector</pre></code><p>\ntransform_incoming(<em>son</em>, <em>collection</em>)<p>Add the _ns field to the incoming object</p>\n<p>A son manipulator that adds the _ns field.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.NamespaceInjector
pymongo son_manipulator ObjectIdInjector	A										<section class="prog_container"><pre><code>\nclass pymongo.son_manipulator.ObjectIdInjector</pre></code><p>\ntransform_incoming(<em>son</em>, <em>collection</em>)<p>Add an _id field if it is missing.</p>\n<p>A son manipulator that adds the _id field if it is missing.</p>\n\n<p>Changed in version 2.7: ObjectIdInjector is no longer used by PyMongo, but remains in this\nmodule for backwards compatibility.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdInjector
pymongo son_manipulator ObjectIdShuffler	A										<section class="prog_container"><pre><code>\nclass pymongo.son_manipulator.ObjectIdShuffler</pre></code><p>\ntransform_incoming(<em>son</em>, <em>collection</em>)<p>Move _id to the front if it’s there.</p>\n\nwill_copy()<p>We need to copy to be sure that we are dealing with SON, not a dict.</p>\n<p>A son manipulator that moves _id to the first position.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.ObjectIdShuffler
pymongo son_manipulator SONManipulator	A										<section class="prog_container"><pre><code>\nclass pymongo.son_manipulator.SONManipulator</pre></code><p>\ntransform_incoming(<em>son</em>, <em>collection</em>)<p>Manipulate an incoming SON object.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>son: the SON object to be inserted into the database</li>\n<li>collection: the collection the object is being inserted into</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ntransform_outgoing(<em>son</em>, <em>collection</em>)<p>Manipulate an outgoing SON object.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>son: the SON object being retrieved from the database</li>\n<li>collection: the collection this object was stored in</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nwill_copy()<p>Will this SON manipulator make a copy of the incoming document?</p>\n<p>Derived classes that do need to make a copy should override this\nmethod, returning True instead of False. All non-copying manipulators\nwill be applied first (so that the user’s document will be updated\nappropriately), followed by copying manipulators.</p>\n<p>A base son manipulator.</p>\n<p>This manipulator just saves and restores objects without changing them.</p>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/son_manipulator.html#pymongo.son_manipulator.SONManipulator
pymongo cursor_manager CursorManager	A										<section class="prog_container"><pre><code>\nclass pymongo.cursor_manager.CursorManager(<em>client</em>)</pre></code><p>\nclose(<em>cursor_id</em>, <em>address</em>)<p>Kill a cursor.</p>\n<p>Raises TypeError if cursor_id is not an instance of (int, long).</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>cursor_id: cursor id to close</li>\n<li>address: the cursor’s server’s (host, port) pair</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Now requires an address argument.</p>\n\n<p>Instantiate the manager.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>client</code>: a MongoClient</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/cursor_manager.html#pymongo.cursor_manager.CursorManager
pymongo uri_parser parse_host	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.parse_host(<em>entity</em>, <em>default_port=27017</em>)</pre></code><p><p>Validates a host string</p>\n<p>Returns a 2-tuple of host followed by port where port is default_port\nif it wasn’t specified in the string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><dl class="first docutils">\n<dt><code>entity</code>: A host or host:port string where host could be a</dt>\n<dd><p class="first last">hostname or IP address.</p>\n</dd>\n</dl>\n</li>\n<li><dl class="first docutils">\n<dt><code>default_port</code>: The port number to use when one wasn’t</dt>\n<dd><p class="first last">specified in entity.</p>\n</dd>\n</dl>\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_host
pymongo uri_parser parse_ipv6_literal_host	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.parse_ipv6_literal_host(<em>entity</em>, <em>default_port</em>)</pre></code><p><p>Validates an IPv6 literal host:port string.</p>\n<p>Returns a 2-tuple of IPv6 literal followed by port where\nport is default_port if it wasn’t specified in entity.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><dl class="first docutils">\n<dt><code>entity</code>: A string that represents an IPv6 literal enclosed</dt>\n<dd><p class="first last">in braces (e.g. ‘[::1]’ or ‘[::1]:27017’).</p>\n</dd>\n</dl>\n</li>\n<li><dl class="first docutils">\n<dt><code>default_port</code>: The port number to use when one wasn’t</dt>\n<dd><p class="first last">specified in entity.</p>\n</dd>\n</dl>\n</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_ipv6_literal_host
pymongo uri_parser parse_uri	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.parse_uri(<em>uri</em>, <em>default_port=27017</em>, <em>validate=True</em>, <em>warn=False</em>)</pre></code><p><p>Parse and validate a MongoDB URI.</p>\n<p>Returns a dict of the form:</p>\n<pre>{\n    'nodelist': &lt;list of (host, port) tuples&gt;,\n    'username': &lt;username&gt; or None,\n    'password': &lt;password&gt; or None,\n    'database': &lt;database name&gt; or None,\n    'collection': &lt;collection name&gt; or None,\n    'options': &lt;dict of MongoDB URI options&gt;\n}\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>uri</code>: The MongoDB URI to parse.</li>\n<li><code>default_port</code>: The port number to use when one wasn’t specified\nfor a host in the URI.</li>\n<li><code>validate</code>: If True (the default), validate and normalize all\noptions.</li>\n<li><code>warn</code> (optional): When validating, if True then will warn\nthe user then ignore any invalid options or values. If False,\nvalidation will error when options are unsupported or values are\ninvalid.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.1: warn added so invalid options can be ignored.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_uri
pymongo uri_parser parse_userinfo	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.parse_userinfo(<em>userinfo</em>)</pre></code><p><p>Validates the format of user information in a MongoDB URI.\nReserved characters like ‘:’, ‘/’, ‘+’ and ‘@’ must be escaped\nfollowing RFC 2396.</p>\n<p>Returns a 2-tuple containing the unescaped username followed\nby the unescaped password.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Paramaters:</th><td><ul>\n<li><code>userinfo</code>: A string of the form &lt;username&gt;:&lt;password&gt;</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 2.2: Now uses <code>urllib.unquote_plus</code> so <code>+</code> characters must be escaped.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.parse_userinfo
pymongo uri_parser split_hosts	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.split_hosts(<em>hosts</em>, <em>default_port=27017</em>)</pre></code><p><p>Takes a string of the form host1[:port],host2[:port]... and\nsplits it into (host, port) tuples. If [:port] isn’t present the\ndefault_port is used.</p>\n<p>Returns a set of 2-tuples containing the host name (or IP) followed by\nport number.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>hosts</code>: A string of the form host1[:port],host2[:port],...</li>\n<li><code>default_port</code>: The port number to use when one wasn’t specified\nfor a host.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.split_hosts
pymongo uri_parser split_options	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.split_options(<em>opts</em>, <em>validate=True</em>, <em>warn=False</em>)</pre></code><p><p>Takes the options portion of a MongoDB URI, validates each option\nand returns the options in a dictionary.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>opt</code>: A string representing MongoDB URI options.</li>\n<li><code>validate</code>: If True (the default), validate and normalize all\noptions.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.split_options
pymongo uri_parser validate_options	A										<section class="prog_container"><pre><code>\npymongo.uri_parser.validate_options(<em>opts</em>, <em>warn=False</em>)</pre></code><p><p>Validates and normalizes options passed in a MongoDB URI.</p>\n<p>Returns a new dictionary of validated and normalized options. If warn is\nFalse then errors will be thrown for invalid options, otherwise they will\nbe ignored and a warning will be issued.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>opts</code>: A dict of MongoDB URI options.</li>\n<li><code>warn</code> (optional): If True then warnigns will be logged and\ninvalid options will be ignored. Otherwise invalid options will\ncause errors.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/uri_parser.html#pymongo.uri_parser.validate_options
pymongo write_concern WriteConcern	A										<section class="prog_container"><pre><code>\nclass pymongo.write_concern.WriteConcern(<em>w=None</em>, <em>wtimeout=None</em>, <em>j=None</em>, <em>fsync=None</em>)</pre></code><p>\nacknowledged<p>If True write operations will wait for acknowledgement before\nreturning.</p>\n\ndocument<p>The document representation of this write concern.</p>\n\n<p class="first admonition-title">Note</p>\n<p class="last">WriteConcern is immutable. Mutating the value of\ndocument does not mutate this WriteConcern.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>w</code>: (integer or string) Used with replication, write operations\nwill block until they have been replicated to the specified number\nor tagged set of servers. <code>w=&lt;integer&gt;</code> always includes the replica\nset primary (e.g. w=3 means write to the primary and wait until\nreplicated to <strong>two</strong> secondaries). <strong>w=0 disables acknowledgement\nof write operations and can not be used with other write concern\noptions.</strong></li>\n<li><code>wtimeout</code>: (integer) Used in conjunction with <code>w</code>. Specify a value\nin milliseconds to control how long to wait for write propagation\nto complete. If replication does not complete in the given\ntimeframe, a timeout exception is raised.</li>\n<li><code>j</code>: If True block until write operations have been committed\nto the journal. Cannot be used in combination with <code>fsync</code>. Prior\nto MongoDB 2.6 this option was ignored if the server was running\nwithout journaling. Starting with MongoDB 2.6 write operations will\nfail with an exception if this option is used when the server is\nrunning without journaling.</li>\n<li><code>fsync</code>: If True and the server is running without journaling,\nblocks until the server has synced all data files to disk. If the\nserver is running with journaling, this acts the same as the <code>j</code>\noption, blocking until write operations have been committed to the\njournal. Cannot be used in combination with <code>j</code>.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</p></section>	http://api.mongodb.com/python/current/api/pymongo/write_concern.html#pymongo.write_concern.WriteConcern
gridfs GridFS	A										<section class="prog_container"><pre><code>\nclass gridfs.GridFS(<em>database</em>, <em>collection='fs'</em>)</pre></code><p>\ndelete(<em>file_id</em>)<p>Delete a file from GridFS by "_id".</p>\n<p>Deletes all data belonging to the file with "_id":\nfile_id.</p>\n\n<p class="first admonition-title">Warning</p>\n<p class="last">Any processes/threads reading from the file while\nthis method is executing will likely see an invalid/corrupt\nfile. Care should be taken to avoid concurrent reads to a file\nwhile it is being deleted.</p>\n\n\n<p class="first admonition-title">Note</p>\n<p class="last">Deletes of non-existent files are considered successful\nsince the end result is the same: no file with that _id remains.</p>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: "_id" of the file to delete</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.1: delete no longer ensures indexes.</p>\n\n\nexists(<em>document_or_id=None</em>, <em>**kwargs</em>)<p>Check if a file exists in this instance of GridFS.</p>\n<p>The file to check for can be specified by the value of its\n_id key, or by passing in a query document. A query\ndocument can be passed in as dictionary, or by using keyword\narguments. Thus, the following three calls are equivalent:</p>\n<pre>&gt;&gt;&gt; fs.exists(file_id)\n&gt;&gt;&gt; fs.exists({"_id": file_id})\n&gt;&gt;&gt; fs.exists(_id=file_id)\n</pre>\n\n<p>As are the following two calls:</p>\n<pre>&gt;&gt;&gt; fs.exists({"filename": "mike.txt"})\n&gt;&gt;&gt; fs.exists(filename="mike.txt")\n</pre>\n\n<p>And the following two:</p>\n<pre>&gt;&gt;&gt; fs.exists({"foo": {"$gt": 12}})\n&gt;&gt;&gt; fs.exists(foo={"$gt": 12})\n</pre>\n\n<p>Returns True if a matching file exists, False\notherwise. Calls to exists() will not automatically\ncreate appropriate indexes; application developers should be\nsure to create indexes if needed and as appropriate.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>document_or_id (optional): query document, or _id of the\ndocument to check for</li>\n<li>**kwargs (optional): keyword arguments are used as a\nquery document, if they’re present.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nfind(<em>*args</em>, <em>**kwargs</em>)<p>Query GridFS for files.</p>\n<p>Returns a cursor that iterates across files matching\narbitrary queries on the files collection. Can be combined\nwith other modifiers for additional control. For example:</p>\n<pre>for grid_out in fs.find({"filename": "lisa.txt"},\n                        no_cursor_timeout=True):\n    data = grid_out.read()\n</pre>\n\n<p>would iterate through all versions of “lisa.txt” stored in GridFS.\nNote that setting no_cursor_timeout to True may be important to\nprevent the cursor from timing out during long multi-file processing\nwork.</p>\n<p>As another example, the call:</p>\n<pre>most_recent_three = fs.find().sort("uploadDate", -1).limit(3)\n</pre>\n\n<p>would return a cursor to the three most recently uploaded files\nin GridFS.</p>\n<p>Follows a similar interface to\nfind()\nin Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter (optional): a SON object specifying elements which\nmust be present for a document to be included in the\nresult set</li>\n<li>skip (optional): the number of files to omit (from\nthe start of the result set) when returning the results</li>\n<li>limit (optional): the maximum number of results to\nreturn</li>\n<li>no_cursor_timeout (optional): if False (the default), any\nreturned cursor is closed by the server after 10 minutes of\ninactivity. If set to True, the returned cursor will never\ntime out on the server. Care should be taken to ensure that\ncursors with no_cursor_timeout turned on are properly closed.</li>\n<li>sort (optional): a list of (key, direction) pairs\nspecifying the sort order for this query. See\nsort() for details.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Raises TypeError if any of the arguments are of\nimproper type. Returns an instance of\nGridOutCursor\ncorresponding to this query.</p>\n\n<p>Changed in version 3.0: Removed the read_preference, tag_sets, and\nsecondary_acceptable_latency_ms options.</p>\n\n\n<p>New in version 2.7.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>find</em></p>\n\n\nfind_one(<em>filter=None</em>, <em>*args</em>, <em>**kwargs</em>)<p>Get a single file from gridfs.</p>\n<p>All arguments to find() are also valid arguments for\nfind_one(), although any limit argument will be\nignored. Returns a single GridOut,\nor None if no matching file is found. For example:</p>\n<pre>file = fs.find_one({"filename": "lisa.txt"})\n</pre>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter (optional): a dictionary specifying\nthe query to be performing OR any other type to be used as\nthe value for a query for "_id" in the file collection.</li>\n<li>*args (optional): any additional positional arguments are\nthe same as the arguments to find().</li>\n<li>**kwargs (optional): any additional keyword arguments\nare the same as the arguments to find().</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nget(<em>file_id</em>)<p>Get a file from GridFS by "_id".</p>\n<p>Returns an instance of GridOut,\nwhich provides a file-like interface for reading.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: "_id" of the file to get</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nget_last_version(<em>filename=None</em>, <em>**kwargs</em>)<p>Get the most recent version of a file in GridFS by "filename"\nor metadata fields.</p>\n<p>Equivalent to calling get_version() with the default\nversion (-1).</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filename: "filename" of the file to get, or None</li>\n<li>**kwargs (optional): find files by custom metadata.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nget_version(<em>filename=None</em>, <em>version=-1</em>, <em>**kwargs</em>)<p>Get a file from GridFS by "filename" or metadata fields.</p>\n<p>Returns a version of the file in GridFS whose filename matches\nfilename and whose metadata fields match the supplied keyword\narguments, as an instance of GridOut.</p>\n<p>Version numbering is a convenience atop the GridFS API provided\nby MongoDB. If more than one file matches the query (either by\nfilename alone, by metadata fields, or by a combination of\nboth), then version -1 will be the most recently uploaded\nmatching file, -2 the second most recently\nuploaded, etc. Version 0 will be the first version\nuploaded, 1 the second version, etc. So if three versions\nhave been uploaded, then version 0 is the same as version\n-3, version 1 is the same as version -2, and\nversion 2 is the same as version -1.</p>\n<p>Raises NoFile if no such version of\nthat file exists.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filename: "filename" of the file to get, or None</li>\n<li>version (optional): version of the file to get (defaults\nto -1, the most recent version uploaded)</li>\n<li>**kwargs (optional): find files by custom metadata.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.1: get_version no longer ensures indexes.</p>\n\n\nlist()<p>List the names of all files stored in this instance of\nGridFS.</p>\n\n<p>Changed in version 3.1: list no longer ensures indexes.</p>\n\n\nnew_file(<em>**kwargs</em>)<p>Create a new file in GridFS.</p>\n<p>Returns a new GridIn instance to\nwhich data can be written. Any keyword arguments will be\npassed through to GridIn().</p>\n<p>If the "_id" of the file is manually specified, it must\nnot already exist in GridFS. Otherwise\nFileExists is raised.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>**kwargs (optional): keyword arguments for file creation</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nput(<em>data</em>, <em>**kwargs</em>)<p>Put data in GridFS as a new file.</p>\n<p>Equivalent to doing:</p>\n<pre>try:\n    f = new_file(**kwargs)\n    f.write(data)\nfinally:\n    f.close()\n</pre>\n\n<p>data can be either an instance of str (bytes\nin python 3) or a file-like object providing a read() method.\nIf an encoding keyword argument is passed, data can also be a\nunicode (str in python 3) instance, which will\nbe encoded as encoding before being written. Any keyword arguments\nwill be passed through to the created file - see\nGridIn() for possible arguments. Returns the\n"_id" of the created file.</p>\n<p>If the "_id" of the file is manually specified, it must\nnot already exist in GridFS. Otherwise\nFileExists is raised.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>data: data to be written as a file.</li>\n<li>**kwargs (optional): keyword arguments for file creation</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: w=0 writes to GridFS are now prohibited.</p>\n\n<p>Create a new instance of GridFS.</p>\n<p>Raises TypeError if <code>database</code> is not an instance of\nDatabase.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>database</code>: database to use</li>\n<li><code>collection</code> (optional): root collection to use</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.1: Indexes are only ensured on the first write to the DB.</p>\n\n\n<p>Changed in version 3.0: <code>database</code> must use an acknowledged\nwrite_concern</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>gridfs</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFS
gridfs GridFSBucket	A										<section class="prog_container"><pre><code>\nclass gridfs.GridFSBucket(<em>db</em>, <em>bucket_name='fs'</em>, <em>chunk_size_bytes=261120</em>, <em>write_concern=None</em>, <em>read_preference=None</em>)</pre></code><p>\ndelete(<em>file_id</em>)<p>Given an file_id, delete this stored file’s files collection document\nand associated chunks from a GridFS bucket.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get _id of file to delete\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\nfs.delete(file_id)\n</pre>\n\n<p>Raises NoFile if no file with file_id exists.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: The _id of the file to be deleted.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ndownload_to_stream(<em>file_id</em>, <em>destination</em>)<p>Downloads the contents of the stored file specified by file_id and\nwrites the contents to destination.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get _id of file to read\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\n# Get file to write to\nfile = open('myfile','wb+')\nfs.download_to_stream(file_id, file)\nfile.seek(0)\ncontents = file.read()\n</pre>\n\n<p>Raises NoFile if no file with file_id exists.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: The _id of the file to be downloaded.</li>\n<li>destination: a file-like object implementing write().</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ndownload_to_stream_by_name(<em>filename</em>, <em>destination</em>, <em>revision=-1</em>)<p>Write the contents of filename (with optional revision) to\ndestination.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get file to write to\nfile = open('myfile','wb')\nfs.download_to_stream_by_name("test_file", file)\n</pre>\n\n<p>Raises NoFile if no such version of\nthat file exists.</p>\n<p>Raises ValueError if filename is not a string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filename: The name of the file to read from.</li>\n<li>destination: A file-like object that implements write().</li>\n<li>revision (optional): Which revision (documents with the same\nfilename and different uploadDate) of the file to retrieve.\nDefaults to -1 (the most recent revision).</li>\n</ul>\n</td>\n</tr>\n<tr><th>Note:</th><td><p class="first">Revision numbers are defined as follows:</p>\n<ul>\n<li>0 = the original stored file</li>\n<li>1 = the first revision</li>\n<li>2 = the second revision</li>\n<li>etc...</li>\n<li>-2 = the second most recent revision</li>\n<li>-1 = the most recent revision</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nfind(<em>*args</em>, <em>**kwargs</em>)<p>Find and return the files collection documents that match filter</p>\n<p>Returns a cursor that iterates across files matching\narbitrary queries on the files collection. Can be combined\nwith other modifiers for additional control.</p>\n<p>For example:</p>\n<pre>for grid_data in fs.find({"filename": "lisa.txt"},\n                        no_cursor_timeout=True):\n    data = grid_data.read()\n</pre>\n\n<p>would iterate through all versions of “lisa.txt” stored in GridFS.\nNote that setting no_cursor_timeout to True may be important to\nprevent the cursor from timing out during long multi-file processing\nwork.</p>\n<p>As another example, the call:</p>\n<pre>most_recent_three = fs.find().sort("uploadDate", -1).limit(3)\n</pre>\n\n<p>would return a cursor to the three most recently uploaded files\nin GridFS.</p>\n<p>Follows a similar interface to\nfind()\nin Collection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filter: Search query.</li>\n<li>batch_size (optional): The number of documents to return per\nbatch.</li>\n<li>limit (optional): The maximum number of documents to return.</li>\n<li>no_cursor_timeout (optional): The server normally times out idle\ncursors after an inactivity period (10 minutes) to prevent excess\nmemory use. Set this option to True prevent that.</li>\n<li>skip (optional): The number of documents to skip before\nreturning.</li>\n<li>sort (optional): The order by which to sort results. Defaults to\nNone.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nopen_download_stream(<em>file_id</em>)<p>Opens a Stream from which the application can read the contents of\nthe stored file specified by file_id.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# get _id of file to read.\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\ngrid_out = fs.open_download_stream(file_id)\ncontents = grid_out.read()\n</pre>\n\n<p>Returns an instance of GridOut.</p>\n<p>Raises NoFile if no file with file_id exists.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: The _id of the file to be downloaded.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nopen_download_stream_by_name(<em>filename</em>, <em>revision=-1</em>)<p>Opens a Stream from which the application can read the contents of\nfilename and optional revision.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\ngrid_out = fs.open_download_stream_by_name("test_file")\ncontents = grid_out.read()\n</pre>\n\n<p>Returns an instance of GridOut.</p>\n<p>Raises NoFile if no such version of\nthat file exists.</p>\n<p>Raises ValueError filename is not a string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filename: The name of the file to read from.</li>\n<li>revision (optional): Which revision (documents with the same\nfilename and different uploadDate) of the file to retrieve.\nDefaults to -1 (the most recent revision).</li>\n</ul>\n</td>\n</tr>\n<tr><th>Note:</th><td><p class="first">Revision numbers are defined as follows:</p>\n<ul>\n<li>0 = the original stored file</li>\n<li>1 = the first revision</li>\n<li>2 = the second revision</li>\n<li>etc...</li>\n<li>-2 = the second most recent revision</li>\n<li>-1 = the most recent revision</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nopen_upload_stream(<em>filename</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)<p>Opens a Stream that the application can write the contents of the\nfile to.</p>\n<p>The user must specify the filename, and can choose to add any\nadditional information in the metadata field of the file document or\nmodify the chunk size.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\ngrid_in, file_id = fs.open_upload_stream(\n      "test_file", chunk_size_bytes=4,\n      metadata={"contentType": "text/plain"})\ngrid_in.write("data I want to store!")\ngrid_in.close()  # uploaded on close\n</pre>\n\n<p>Returns an instance of GridIn.</p>\n<p>Raises NoFile if no such version of\nthat file exists.\nRaises ValueError if filename is not a string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filename: The name of the file to upload.</li>\n<li>chunk_size_bytes (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes in GridFSBucket.</li>\n<li>metadata (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nopen_upload_stream_with_id(<em>file_id</em>, <em>filename</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)<p>Opens a Stream that the application can write the contents of the\nfile to.</p>\n<p>The user must specify the file id and filename, and can choose to add\nany additional information in the metadata field of the file document\nor modify the chunk size.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\ngrid_in, file_id = fs.open_upload_stream(\n      ObjectId(),\n      "test_file",\n      chunk_size_bytes=4,\n      metadata={"contentType": "text/plain"})\ngrid_in.write("data I want to store!")\ngrid_in.close()  # uploaded on close\n</pre>\n\n<p>Returns an instance of GridIn.</p>\n<p>Raises NoFile if no such version of\nthat file exists.\nRaises ValueError if filename is not a string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: The id to use for this file. The id must not have\nalready been used for another file.</li>\n<li>filename: The name of the file to upload.</li>\n<li>chunk_size_bytes (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes in GridFSBucket.</li>\n<li>metadata (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nrename(<em>file_id</em>, <em>new_filename</em>)<p>Renames the stored file with the specified file_id.</p>\n<p>For example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\n# Get _id of file to rename\nfile_id = fs.upload_from_stream("test_file", "data I want to store!")\nfs.rename(file_id, "new_test_name")\n</pre>\n\n<p>Raises NoFile if no file with file_id exists.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: The _id of the file to be renamed.</li>\n<li>new_filename: The new name of the file.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupload_from_stream(<em>filename</em>, <em>source</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)<p>Uploads a user file to a GridFS bucket.</p>\n<p>Reads the contents of the user file from source and uploads\nit to the file filename. Source can be a string or file-like object.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\nfile_id = fs.upload_from_stream(\n    "test_file",\n    "data I want to store!",\n    chunk_size_bytes=4,\n    metadata={"contentType": "text/plain"})\n</pre>\n\n<p>Returns the _id of the uploaded file.</p>\n<p>Raises NoFile if no such version of\nthat file exists.\nRaises ValueError if filename is not a string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>filename: The name of the file to upload.</li>\n<li>source: The source stream of the content to be uploaded. Must be\na file-like object that implements read() or a string.</li>\n<li>chunk_size_bytes (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes of GridFSBucket.</li>\n<li>metadata (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nupload_from_stream_with_id(<em>file_id</em>, <em>filename</em>, <em>source</em>, <em>chunk_size_bytes=None</em>, <em>metadata=None</em>)<p>Uploads a user file to a GridFS bucket with a custom file id.</p>\n<p>Reads the contents of the user file from source and uploads\nit to the file filename. Source can be a string or file-like object.\nFor example:</p>\n<pre>my_db = MongoClient().test\nfs = GridFSBucket(my_db)\nfile_id = fs.upload_from_stream(\n    ObjectId(),\n    "test_file",\n    "data I want to store!",\n    chunk_size_bytes=4,\n    metadata={"contentType": "text/plain"})\n</pre>\n\n<p>Raises NoFile if no such version of\nthat file exists.\nRaises ValueError if filename is not a string.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>file_id: The id to use for this file. The id must not have\nalready been used for another file.</li>\n<li>filename: The name of the file to upload.</li>\n<li>source: The source stream of the content to be uploaded. Must be\na file-like object that implements read() or a string.</li>\n<li>chunk_size_bytes (options): The number of bytes per chunk of this\nfile. Defaults to the chunk_size_bytes of GridFSBucket.</li>\n<li>metadata (optional): User data for the ‘metadata’ field of the\nfiles collection document. If not provided the metadata field will\nbe omitted from the files collection document.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>Create a new instance of GridFSBucket.</p>\n<p>Raises TypeError if <code>database</code> is not an instance of\nDatabase.</p>\n<p>Raises ConfigurationError if <code>write_concern</code>\nis not acknowledged.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>database</code>: database to use.</li>\n<li><code>bucket_name</code> (optional): The name of the bucket. Defaults to ‘fs’.</li>\n<li><code>chunk_size_bytes</code> (optional): The chunk size in bytes. Defaults\nto 255KB.</li>\n<li><code>write_concern</code> (optional): The\nWriteConcern to use. If None\n(the default) db.write_concern is used.</li>\n<li><code>read_preference</code> (optional): The read preference to use. If\nNone (the default) db.read_preference is used.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>New in version 3.1.</p>\n\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>gridfs</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/index.html#gridfs.GridFSBucket
gridfs errors CorruptGridFile	A										<section class="prog_container"><pre><code>\nexception gridfs.errors.CorruptGridFile</pre></code><p><p>Raised when a file in GridFS is malformed.</p>\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.CorruptGridFile
gridfs errors FileExists	A										<section class="prog_container"><pre><code>\nexception gridfs.errors.FileExists</pre></code><p><p>Raised when trying to create a file that already exists.</p>\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.FileExists
gridfs errors GridFSError	A										<section class="prog_container"><pre><code>\nexception gridfs.errors.GridFSError</pre></code><p><p>Base class for all GridFS exceptions.</p>\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.GridFSError
gridfs errors NoFile	A										<section class="prog_container"><pre><code>\nexception gridfs.errors.NoFile</pre></code><p><p>Raised when trying to read from a non-existent file.</p>\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/errors.html#gridfs.errors.NoFile
gridfs grid_file GridIn	A										<section class="prog_container"><pre><code>\nclass gridfs.grid_file.GridIn(<em>root_collection</em>, <em>**kwargs</em>)</pre></code><p>\nabort()<p>Remove all chunks/files that may have been uploaded and close.</p>\n\nclose()<p>Flush the file and close it.</p>\n<p>A closed file cannot be written any more. Calling\nclose() more than once is allowed.</p>\n\nwrite(<em>data</em>)<p>Write data to the file. There is no return value.</p>\n<p>data can be either a string of bytes or a file-like object\n(implementing read()). If the file has an\nencoding attribute, data can also be a\nunicode (str in python 3) instance, which\nwill be encoded as encoding before being written.</p>\n<p>Due to buffering, the data may not actually be written to the\ndatabase until the close() method is called. Raises\nValueError if this file is already closed. Raises\nTypeError if data is not an instance of\nstr (bytes in python 3), a file-like object,\nor an instance of unicode (str in python 3).\nUnicode data is only allowed if the file has an encoding\nattribute.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>data: string of bytes or file-like object to be written\nto the file</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nwritelines(<em>sequence</em>)<p>Write a sequence of strings to the file.</p>\n<p>Does not add seperators.</p>\n\n_id<p>The '_id' value for this file.</p>\n<p>This attribute is read-only.</p>\n\nchunk_size<p>Chunk size for this file.</p>\n<p>This attribute is read-only.</p>\n\nclosed<p>Is this file closed?</p>\n\ncontent_type<p>Mime-type for this file.</p>\n\nfilename<p>Name of this file.</p>\n\nlength<p>Length (in bytes) of this file.</p>\n<p>This attribute is read-only and can only be read after close() has been called.</p>\n\nmd5<p>MD5 of the contents of this file (generated on the server).</p>\n<p>This attribute is read-only and can only be read after close() has been called.</p>\n\nname<p>Alias for filename.</p>\n\nupload_date<p>Date that this file was uploaded.</p>\n<p>This attribute is read-only and can only be read after close() has been called.</p>\n<p>Write a file to GridFS</p>\n<p>Application developers should generally not need to\ninstantiate this class directly - instead see the methods\nprovided by GridFS.</p>\n<p>Raises TypeError if <code>root_collection</code> is not an\ninstance of Collection.</p>\n<p>Any of the file level options specified in the GridFS Spec may be passed as\nkeyword arguments. Any additional keyword arguments will be\nset as additional fields on the file document. Valid keyword\narguments include:</p>\n\n<ul>\n<li>"_id": unique ID for this file (default:\nObjectId) - this "_id" must\nnot have already been used for another file</li>\n<li>"filename": human name for the file</li>\n<li>"contentType" or "content_type": valid mime-type\nfor the file</li>\n<li>"chunkSize" or "chunk_size": size of each of the\nchunks, in bytes (default: 255 kb)</li>\n<li>"encoding": encoding used for this file. In Python 2,\nany unicode that is written to the file will be\nconverted to a str. In Python 3, any str\nthat is written to the file will be converted to\nbytes.</li>\n</ul>\n\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>root_collection</code>: root collection to write to</li>\n<li><code>**kwargs</code> (optional): file level options (see above)</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: <code>root_collection</code> must use an acknowledged\nwrite_concern</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridIn
gridfs grid_file GridOut	A										<section class="prog_container"><pre><code>\nclass gridfs.grid_file.GridOut(<em>root_collection</em>, <em>file_id=None</em>, <em>file_document=None</em>)</pre></code><p>\n__iter__()<p>Return an iterator over all of this file’s data.</p>\n<p>The iterator will return chunk-sized instances of\nstr (bytes in python 3). This can be\nuseful when serving files using a webserver that handles\nsuch an iterator efficiently.</p>\n\nclose()<p>Make GridOut more generically file-like.</p>\n\nread(<em>size=-1</em>)<p>Read at most size bytes from the file (less if there\nisn’t enough data).</p>\n<p>The bytes are returned as an instance of str (bytes\nin python 3). If size is negative or omitted all data is read.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>size (optional): the number of bytes to read</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nreadchunk()<p>Reads a chunk at a time. If the current position is within a\nchunk the remainder of the chunk is returned.</p>\n\nreadline(<em>size=-1</em>)<p>Read one line or up to size bytes from the file.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>size (optional): the maximum number of bytes to read</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\nseek(<em>pos</em>, <em>whence=0</em>)<p>Set the current position of this file.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li>pos: the position (or offset if using relative\npositioning) to seek to</li>\n<li>whence (optional): where to seek\nfrom. os.SEEK_SET (0) for absolute file\npositioning, os.SEEK_CUR (1) to seek relative\nto the current position, os.SEEK_END (2) to\nseek relative to the file’s end.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\ntell()<p>Return the current position of this file.</p>\n\n_id<p>The '_id' value for this file.</p>\n<p>This attribute is read-only.</p>\n\naliases<p>List of aliases for this file.</p>\n<p>This attribute is read-only.</p>\n\nchunk_size<p>Chunk size for this file.</p>\n<p>This attribute is read-only.</p>\n\ncontent_type<p>Mime-type for this file.</p>\n<p>This attribute is read-only.</p>\n\nfilename<p>Name of this file.</p>\n<p>This attribute is read-only.</p>\n\nlength<p>Length (in bytes) of this file.</p>\n<p>This attribute is read-only.</p>\n\nmd5<p>MD5 of the contents of this file (generated on the server).</p>\n<p>This attribute is read-only.</p>\n\nmetadata<p>Metadata attached to this file.</p>\n<p>This attribute is read-only.</p>\n\nname<p>Alias for filename.</p>\n<p>This attribute is read-only.</p>\n\nupload_date<p>Date that this file was first uploaded.</p>\n<p>This attribute is read-only.</p>\n<p>Read a file from GridFS</p>\n<p>Application developers should generally not need to\ninstantiate this class directly - instead see the methods\nprovided by GridFS.</p>\n<p>Either <code>file_id</code> or <code>file_document</code> must be specified,\n<code>file_document</code> will be given priority if present. Raises\nTypeError if <code>root_collection</code> is not an instance of\nCollection.</p>\n<table>\n<col></col>\n<col></col>\n<tbody valign="top">\n<tr><th>Parameters:</th><td><ul>\n<li><code>root_collection</code>: root collection to read from</li>\n<li><code>file_id</code> (optional): value of "_id" for the file to read</li>\n<li><code>file_document</code> (optional): file document from\n<code>root_collection.files</code></li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n\n<p>Changed in version 3.0: Creating a GridOut does not immediately retrieve the file metadata\nfrom the server. Metadata is fetched when first needed.</p>\n\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOut
gridfs grid_file GridOutCursor	A										<section class="prog_container"><pre><code>\nclass gridfs.grid_file.GridOutCursor(<em>collection</em>, <em>filter=None</em>, <em>skip=0</em>, <em>limit=0</em>, <em>no_cursor_timeout=False</em>, <em>sort=None</em>, <em>batch_size=0</em>)</pre></code><p>\nnext()<p>Get next GridOut object from cursor.</p>\n<p>Create a new cursor, similar to the normal\nCursor.</p>\n<p>Should not be called directly by application developers - see\nthe GridFS method find() instead.</p>\n\n<p class="first admonition-title">See also</p>\n<p class="admonition-title">See general MongoDB documentation</p>\n<p class="last"><em>cursors</em></p>\n\n</p></section>	http://api.mongodb.com/python/current/api/gridfs/grid_file.html#gridfs.grid_file.GridOutCursor
